CREATE OR REPLACE TABLE LANDING.WORK_MDM_COR_CUSTOMER AS 
SELECT
SOURCE_KEY1,
SOURCE_KEY2,
SOURCE_KEY3,
SOURCE_KEY1_DESC,
SOURCE_KEY2_DESC,	
SOURCE_KEY3_DESC,
SOURCE_SYSTEM_CD,
FIRST_NM,
LAST_NM,
MIDDLE_NM,
NAME_SUFFIX_CD,
SALUTATION_CD,
BIRTH_DT,
GENDER_CD,
MARITAL_STATUS,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
COALESCE(HOME_TELEPHONE_NUM, WORK_PHONE_NUM,COR_MASTER_PHONE_NUM,OTHER_PHONE_NUM) AS PRIMARY_PHONE_NUM,
RESIDENTIAL_ADDRESS_LINE1,
RESIDENTIAL_ADDRESS_LINE2,
RESIDENTIAL_CITY,
RESIDENTIAL_STATE,
RESIDENTIAL_ZIP,
BILLING_ADDRESS_LINE1,
BILLING_ADDRESS_LINE2,
BILLING_CITY,
BILLING_STATE,
BILLING_ZIP,
OTHER_ADDRESS_LINE1,
OTHER_ADDRESS_LINE2,
OTHER_CITY,
OTHER_STATE,
OTHER_ZIP,
OTHER_EMAIL_ADDRESS,
HOME_TELEPHONE_NUM,
WORK_PHONE_NUM,
OTHER_PHONE_NUM,
COR_MASTER_PHONE_NUM,
COUNT(CASE
      WHEN (TRIM(PRIMARY_ADDRESS_LINE1) IS NULL OR TRIM(PRIMARY_ADDRESS_LINE1)='') THEN NULL
      ELSE 1 END) OVER(PARTITION BY UPPER(FIRST_NM),
    UPPER(LAST_NM),
    BIRTH_DT,
    UPPER(PRIMARY_ADDRESS_LINE1),
    UPPER(PRIMARY_ADDRESS_LINE2),
    UPPER(PRIMARY_CITY),
    UPPER(PRIMARY_STATE),
    UPPER(PRIMARY_ZIP)) AS MERGE_CHECK1_CTL, 
COUNT(CASE
      WHEN (TRIM(PRIMARY_EMAIL_ADDRESS) IS NULL OR TRIM(PRIMARY_EMAIL_ADDRESS)='') THEN NULL
      ELSE 1 END) OVER(PARTITION BY UPPER(FIRST_NM),
    UPPER(LAST_NM),
    UPPER(PRIMARY_EMAIL_ADDRESS)) AS MERGE_CHECK2_CTL,
'      ' as MERGE_FLAG,
CAST(NULL AS STRING) as ADDRESS_MATCH_SOURCE_KEY,  -- RENAMED
CAST(NULL AS INT64) AS CUSTOMER_MDM_KEY,
CAST(NULL AS STRING) AS WORK_MATCH_GROUP,
CAST(NULL AS STRING) AS MDM_MATCH_GROUP,
CAST(NULL AS BYTES) AS HOME_MD5_KEY,
CAST(NULL AS BYTES) AS MAILING_MD5_KEY,
CAST(NULL AS BYTES) AS OTHER_MD5_KEY,
CAST(NULL AS STRING) AS EMAIL_MATCH_SOURCE_KEY, -- New Column
CAST(NULL AS STRING) AS ADDRESS_MATCH_DESC, -- New Column
CAST(NULL AS STRING) AS EMAIL_MATCH_DESC, -- New Column
CAST(NULL AS STRING) AS GOLDEN_MATCH_KEY, -- New Column
SOURCE_CREATE_DATE,
REGEXP_REPLACE(CONCAT( IFNULL(UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE1)),''),
                          IFNULL(UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE2)),''), 
						  IFNULL(UPPER(TRIM(RESIDENTIAL_CITY)),''), 
						  IFNULL(UPPER(TRIM(RESIDENTIAL_STATE)),''), 
						  IFNULL(UPPER(TRIM(RESIDENTIAL_ZIP)),'')),
				  '[^a-zA-Z0-9]','') AS ADDRESS_MATCH_KEY1, -- New Column
REGEXP_REPLACE(CONCAT( IFNULL(UPPER(TRIM(BILLING_ADDRESS_LINE1)),''),
                          IFNULL(UPPER(TRIM(BILLING_ADDRESS_LINE2)),''), 
						  IFNULL(UPPER(TRIM(BILLING_CITY)),''), 
						  IFNULL(UPPER(TRIM(BILLING_STATE)),''), 
						  IFNULL(UPPER(TRIM(BILLING_ZIP)),'')),
				  '[^a-zA-Z0-9]','') AS ADDRESS_MATCH_KEY2 -- New Column
 from ( 
SELECT DISTINCT 
CAST(SOURCE_KEY1 AS STRING) as SOURCE_KEY1,
CAST(SOURCE_KEY2 AS STRING) as SOURCE_KEY2,
CAST(SOURCE_KEY3 AS STRING) as SOURCE_KEY3,
SOURCE_KEY1_DESC,
SOURCE_KEY2_DESC,	
SOURCE_KEY3_DESC,
SOURCE_SYSTEM_CD,
UPPER(TRIM(FIRST_NM)) AS FIRST_NM,
UPPER(TRIM(LAST_NM)) AS LAST_NM,
UPPER(TRIM(MIDDLE_NM)) AS MIDDLE_NM,
UPPER(TRIM(NAME_SUFFIX_CD)) AS NAME_SUFFIX_CD,
UPPER(TRIM(SALUTATION_CD)) AS SALUTATION_CD,
BIRTH_DT,
UPPER(TRIM(GENDER_CD)) AS GENDER_CD,
UPPER(TRIM(MARITAL_STATUS)) AS MARITAL_STATUS,
UPPER(TRIM(PRIMARY_ADDRESS_LINE1)) AS PRIMARY_ADDRESS_LINE1,
UPPER(TRIM(PRIMARY_ADDRESS_LINE2)) AS PRIMARY_ADDRESS_LINE2,
UPPER(TRIM(PRIMARY_CITY)) AS PRIMARY_CITY,
UPPER(TRIM(PRIMARY_STATE)) AS PRIMARY_STATE,
  CASE
    WHEN LENGTH(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
END AS PRIMARY_ZIP,
UPPER(TRIM(PRIMARY_EMAIL_ADDRESS)) AS PRIMARY_EMAIL_ADDRESS,
UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE1)) AS RESIDENTIAL_ADDRESS_LINE1,
UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE2)) AS RESIDENTIAL_ADDRESS_LINE2,
UPPER(TRIM(RESIDENTIAL_CITY)) AS RESIDENTIAL_CITY,
UPPER(TRIM(RESIDENTIAL_STATE)) AS RESIDENTIAL_STATE,
  CASE
    WHEN LENGTH(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
END AS RESIDENTIAL_ZIP,
UPPER(TRIM(BILLING_ADDRESS_LINE1)) AS BILLING_ADDRESS_LINE1,
UPPER(TRIM(BILLING_ADDRESS_LINE2)) AS BILLING_ADDRESS_LINE2,
UPPER(TRIM(BILLING_CITY)) AS BILLING_CITY,
UPPER(TRIM(BILLING_STATE)) AS BILLING_STATE,
UPPER(TRIM(BILLING_ZIP)) AS BILLING_ZIP,
UPPER(TRIM(OTHER_ADDRESS_LINE1)) AS OTHER_ADDRESS_LINE1,
UPPER(TRIM(OTHER_ADDRESS_LINE2)) AS OTHER_ADDRESS_LINE2,
UPPER(TRIM(OTHER_CITY)) AS OTHER_CITY,
UPPER(TRIM(OTHER_STATE)) AS OTHER_STATE,
UPPER(TRIM(OTHER_ZIP)) AS OTHER_ZIP,
UPPER(TRIM(OTHER_EMAIL_ADDRESS)) AS OTHER_EMAIL_ADDRESS,
CASE WHEN HOME_TELEPHONE_NUM='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(HOME_TELEPHONE_NUM,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(HOME_TELEPHONE_NUM,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(HOME_TELEPHONE_NUM,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(HOME_TELEPHONE_NUM,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(HOME_TELEPHONE_NUM,'[^a-zA-Z0-9]',''),1,10)
END END AS HOME_TELEPHONE_NUM ,
CASE WHEN WORK_PHONE_NUM='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(WORK_PHONE_NUM,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(WORK_PHONE_NUM,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(WORK_PHONE_NUM,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(WORK_PHONE_NUM,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(WORK_PHONE_NUM,'[^a-zA-Z0-9]',''),1,10)
END END AS WORK_PHONE_NUM ,
CASE WHEN OTHER_PHONE_NUM='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(OTHER_PHONE_NUM,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(OTHER_PHONE_NUM,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(OTHER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(OTHER_PHONE_NUM,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(OTHER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,10)
END END AS OTHER_PHONE_NUM ,
CASE WHEN COR_MASTER_PHONE_NUM ='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(COR_MASTER_PHONE_NUM,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(COR_MASTER_PHONE_NUM,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(COR_MASTER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(COR_MASTER_PHONE_NUM,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(COR_MASTER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,10)
END END AS COR_MASTER_PHONE_NUM ,
SOURCE_CREATE_DATE
FROM 
(SELECT 
SOURCE_KEY1,
SOURCE_KEY2,
SOURCE_KEY3,
SOURCE_KEY1_DESC,
SOURCE_KEY2_DESC,	
SOURCE_KEY3_DESC,
SOURCE_SYSTEM_CD,
UPPER(FIRST_NM) AS FIRST_NM,
UPPER(LAST_NM) AS LAST_NM,
MIDDLE_NM,
NAME_SUFFIX_CD,
SALUTATION_CD,
BIRTH_DT,
GENDER_CD,
MARITAL_STATUS,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
RESIDENTIAL_ADDRESS_LINE1,
RESIDENTIAL_ADDRESS_LINE2,
RESIDENTIAL_CITY,
RESIDENTIAL_STATE,
RESIDENTIAL_ZIP,
BILLING_ADDRESS_LINE1,
BILLING_ADDRESS_LINE2,
BILLING_CITY,
BILLING_STATE,
BILLING_ZIP,
OTHER_ADDRESS_LINE1,
OTHER_ADDRESS_LINE2,
OTHER_CITY,
OTHER_STATE,
OTHER_ZIP,
OTHER_EMAIL_ADDRESS,
HOME_TELEPHONE_NUM,
WORK_PHONE_NUM,
OTHER_PHONE_NUM,
CASE WHEN COR_MASTER_PHONE_NUM LIKE '1%' THEN SUBSTR(COR_MASTER_PHONE_NUM,2,10)
WHEN LENGTH(COR_MASTER_PHONE_NUM) = 11  THEN SUBSTR(COR_MASTER_PHONE_NUM,1,10)
WHEN LENGTH(COR_MASTER_PHONE_NUM) = 14 THEN SUBSTR(COR_MASTER_PHONE_NUM,5,10)
WHEN LENGTH(COR_MASTER_PHONE_NUM) > 14 THEN NULL 
WHEN LENGTH(COR_MASTER_PHONE_NUM) < 10 THEN NULL
WHEN LENGTH(COR_MASTER_PHONE_NUM) = 10  and COR_MASTER_PHONE_NUM like '1%' THEN  NULL  WHEN LENGTH(COR_MASTER_PHONE_NUM) = 10 THEN COR_MASTER_PHONE_NUM ELSE NULL END AS COR_MASTER_PHONE_NUM,
SOURCE_CREATE_DATE,
ROW_NUMBER() OVER(PARTITION BY BRANCH_CD, SOURCE_KEY1 ORDER BY SOURCE_CREATE_DATE DESC) RNK 
FROM ( 
SELECT DISTINCT 
TRIM(A.INVOICE_ID) AS SOURCE_KEY1,
CAST(NULL AS STRING) SOURCE_KEY2,
CAST(NULL AS STRING)  SOURCE_KEY3,
'INVOICE_ID' as SOURCE_KEY1_DESC,
CAST(NULL AS STRING) SOURCE_KEY2_DESC,	
CAST(NULL AS STRING)  SOURCE_KEY3_DESC,
'COR' as SOURCE_SYSTEM_CD,
upper(TRIM(A.CONTACT_FIRST_NM)) AS FIRST_NM,
upper(TRIM(A.CONTACT_LAST_NM)) AS LAST_NM,
upper(TRIM(A.CONTACT_MIDDLE_NM))  AS MIDDLE_NM,
CAST(NULL AS STRING) AS NAME_SUFFIX_CD,  
CAST(NULL AS STRING) AS SALUTATION_CD,
CAST(NULL AS DATE)  AS BIRTH_DT,
CAST(NULL AS STRING)  AS GENDER_CD,
CAST(NULL AS STRING)  AS MARITAL_STATUS,
CASE WHEN REGEXP_REPLACE(IFNULL(TRIM(ADDRESS_STREET),' '),r"\r\n",' ') ='' THEN NULL ELSE UPPER(REGEXP_REPLACE(IFNULL(TRIM(ADDRESS_STREET),' '),r"\r\n",' ')) END AS PRIMARY_ADDRESS_LINE1,
CAST(NULL AS STRING) AS PRIMARY_ADDRESS_LINE2,
CASE WHEN CITY='' THEN NULL ELSE UPPER(CITY) END AS PRIMARY_CITY,
CASE WHEN STATE_CD='' THEN NULL ELSE UPPER(STATE_CD) END AS PRIMARY_STATE,
CASE WHEN POSTAL_CD='' THEN NULL ELSE POSTAL_CD END AS PRIMARY_ZIP,
CASE WHEN CONTACT_EMAIL ='' THEN NULL ELSE UPPER(CONTACT_EMAIL) END AS PRIMARY_EMAIL_ADDRESS,
CASE WHEN ADDRESS_STREET='' THEN NULL ELSE UPPER(ADDRESS_STREET) END AS RESIDENTIAL_ADDRESS_LINE1,
CAST(NULL AS STRING) AS RESIDENTIAL_ADDRESS_LINE2,
UPPER(CITY) AS RESIDENTIAL_CITY,
UPPER(STATE_CD) AS RESIDENTIAL_STATE,
POSTAL_CD AS RESIDENTIAL_ZIP,
CAST(NULL AS STRING)  AS BILLING_ADDRESS_LINE1,
CAST(NULL AS STRING) AS BILLING_ADDRESS_LINE2,
CAST(NULL AS STRING) AS BILLING_CITY,
CAST(NULL AS STRING) AS BILLING_STATE,
CAST(NULL AS STRING) AS BILLING_ZIP,
CAST(NULL AS STRING)  AS OTHER_ADDRESS_LINE1,
CAST(NULL AS STRING)  AS OTHER_ADDRESS_LINE2,
CAST(NULL AS STRING) AS OTHER_CITY,
CAST(NULL AS STRING) AS OTHER_STATE,
CAST(NULL AS STRING) AS OTHER_ZIP,	
UPPER(CONTACT_EMAIL) AS OTHER_EMAIL_ADDRESS,
CASE WHEN COALESCE(UPPER(CONTACT_PHONE1_TYPE),UPPER(CONTACT_PHONE2_TYPE)) = "HOME"
THEN COALESCE(CONTACT_PHONE1,CONTACT_PHONE2)
ELSE NULL  END AS HOME_TELEPHONE_NUM,
CASE WHEN COALESCE(UPPER(CONTACT_PHONE1_TYPE),UPPER(CONTACT_PHONE2_TYPE)) = "WORK"
THEN COALESCE(CONTACT_PHONE1,CONTACT_PHONE2)
ELSE NULL  END AS WORK_PHONE_NUM,
CASE WHEN COALESCE(UPPER(CONTACT_PHONE1_TYPE),UPPER(CONTACT_PHONE2_TYPE)) NOT IN ("WORK","HOME")
THEN COALESCE(CONTACT_PHONE1,CONTACT_PHONE2)
ELSE NULL  END AS OTHER_PHONE_NUM,
CASE WHEN COALESCE(UPPER(CONTACT_PHONE1_TYPE),UPPER(CONTACT_PHONE2_TYPE)) IS NOT NULL
THEN COALESCE(REGEXP_REPLACE(CONTACT_PHONE1,'[^0-9]',''),REGEXP_REPLACE(CONTACT_PHONE2,'[^0-9]',''))
WHEN  SUBSTR(REGEXP_REPLACE(CONTACT_NOTE,'[^0-9]',''),0,10) IS NOT NULL 
		THEN SUBSTR(REGEXP_REPLACE(CONTACT_NOTE,'[^0-9]',''),0,10)   
ELSE NULL     
  END AS COR_MASTER_PHONE_NUM,
INVOICE_CREATE_DTTIME AS SOURCE_CREATE_DATE,
BRANCH_CD
FROM LANDING.WORK_PROTRACTOR_INVOICE A WHERE INSERT_DTTIME > (SELECT MAX(CREATE_DTTIME) FROM LANDING.PROTRACTOR_STAGE_INVOICE) )AA ) WHERE RNK = 1);


----------------------------------------------------------------------
--STEP 1.3
----------------------------------------------------------------------
INSERT INTO
  LANDING.MDM_CUSTOMER_EXCEPTIONS ( SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,	
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
	MIDDLE_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
	PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    BILLING_ADDRESS_LINE1,
    BILLING_ADDRESS_LINE2,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
    OTHER_ADDRESS_LINE1,
    OTHER_ADDRESS_LINE2,
    OTHER_CITY,
    OTHER_STATE,
    OTHER_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CREATE_DTTIME)
SELECT
    SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,	
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,    
    FIRST_NM,
    LAST_NM,
	MIDDLE_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
	PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    BILLING_ADDRESS_LINE1,
    BILLING_ADDRESS_LINE2,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
    OTHER_ADDRESS_LINE1,
    OTHER_ADDRESS_LINE2,
    OTHER_CITY,
    OTHER_STATE,
    OTHER_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    cast(SOURCE_CREATE_DATE as date),
    CURRENT_DATETIME()
FROM LANDING.WORK_MDM_COR_CUSTOMER
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR ((PRIMARY_ADDRESS_LINE1 IS NULL  OR PRIMARY_ADDRESS_LINE1 ='') and  PRIMARY_EMAIL_ADDRESS is  null);
  
----------------------------------------------------------------------
--STEP 1.3
----------------------------------------------------------------------
DELETE FROM LANDING.WORK_MDM_COR_CUSTOMER
WHERE REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR ((PRIMARY_ADDRESS_LINE1 IS NULL  OR PRIMARY_ADDRESS_LINE1 ='') and  PRIMARY_EMAIL_ADDRESS is  null);

----------------------------------------------------------------------
--STEP2.1
----------------------------------------------------------------------
update  LANDING.WORK_MDM_COR_CUSTOMER set MERGE_FLAG='Ignore'
where MERGE_FLAG ='      ' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)=0
and not (HOME_TELEPHONE_NUM is not null or WORK_PHONE_NUM is not null or OTHER_PHONE_NUM is not null);
----------------------------------------------------------------------
--STEP2.2
----------------------------------------------------------------------
update  LANDING.WORK_MDM_COR_CUSTOMER set MERGE_FLAG='Golden',GOLDEN_MATCH_KEY=SOURCE_KEY1
where MERGE_FLAG ='      ' 
AND MERGE_CHECK2_CTL in (0,1) and MERGE_CHECK1_CTL in (0,1);

----------------------------------------------------------------------
--STEP2.3 -- This Update statement to identify the group where FIRST_NAME,LAST_NAME and BIRTH_DT are same.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_COR_CUSTOMER D
SET D.WORK_MATCH_GROUP=C.MATCH_SOURCE_KEY
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) MATCH_SOURCE_KEY
from LANDING.WORK_MDM_COR_CUSTOMER where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      ';
----------------------------------------------------------------------
--STEP2.4 -- Below Updates statement to identify the groups where FIRST_NAME,LAST_NAME, BIRTH_DT and ADDRESS are same from STEP2.3.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_COR_CUSTOMER D
SET D.ADDRESS_MATCH_SOURCE_KEY=C.ADDRESS_MATCH_SOURCE_KEY,D.ADDRESS_MATCH_DESC='Merge' -- ADDRESS_MATCH
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY WORK_MATCH_GROUP,UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) ADDRESS_MATCH_SOURCE_KEY
from LANDING.WORK_MDM_COR_CUSTOMER where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2
) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      ';
-----------
update  LANDING.WORK_MDM_COR_CUSTOMER A set A.ADDRESS_MATCH_DESC ='Golden' -- ADDRESS_MATCH Golden Record
where exists (select 1 from 
(select SOURCE_KEY1,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) AS ROW_NUM  from LANDING.WORK_MDM_COR_CUSTOMER where 
MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY1=A.SOURCE_KEY1 and ROW_NUM=1)
and MERGE_FLAG ='      ';

update LANDING.WORK_MDM_COR_CUSTOMER SET EMAIL_MATCH_SOURCE_KEY=ADDRESS_MATCH_SOURCE_KEY, EMAIL_MATCH_DESC=ADDRESS_MATCH_DESC
where MERGE_FLAG ='      ' and MERGE_CHECK2_CTL=0 and MERGE_CHECK1_CTL>=2
and PRIMARY_EMAIL_ADDRESS is null;
 
----------------------------------------------------------------------
--STEP2.5 -- Below Updates statement to identify the groups where FIRST_NAME,LAST_NAME, BIRTH_DT and EMAIL are same from STEP2.3.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_COR_CUSTOMER D
SET D.EMAIL_MATCH_SOURCE_KEY=C.EMAIL_MATCH_SOURCE_KEY,D.EMAIL_MATCH_DESC='Merge' -- EMAIL MATCH
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY WORK_MATCH_GROUP,UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_EMAIL_ADDRESS)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) EMAIL_MATCH_SOURCE_KEY
from LANDING.WORK_MDM_COR_CUSTOMER where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2
) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      '
and PRIMARY_EMAIL_ADDRESS is not null;

---------------

update  LANDING.WORK_MDM_COR_CUSTOMER A set A.EMAIL_MATCH_DESC ='Golden' -- EMAIL_MATCH Golden Record
where exists (select 1 from 
(select SOURCE_KEY1,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_EMAIL_ADDRESS)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) AS ROW_NUM  from LANDING.WORK_MDM_COR_CUSTOMER where 
MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY1=A.SOURCE_KEY1 and ROW_NUM=1)
and MERGE_FLAG ='      '
and PRIMARY_EMAIL_ADDRESS is not null;

----------------------------------------------------------------------
--STEP2.5 -- Below Updates statement to identify the Golden Match Key Based on Address and Email Match Keys Values.
----------------------------------------------------------------------

update  LANDING.WORK_MDM_COR_CUSTOMER A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_COR_CUSTOMER where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden','Merge')
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';
---------------
update  LANDING.WORK_MDM_COR_CUSTOMER A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select M.SOURCE_KEY1,G.GOLDEN_MATCH_KEY from
(select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_COR_CUSTOMER where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden','Merge') and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) G,
(select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_COR_CUSTOMER where ADDRESS_MATCH_DESC ='Merge' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) M
WHERE G.ADDRESS_MATCH_SOURCE_KEY=M.ADDRESS_MATCH_SOURCE_KEY
) B
where A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';

----------------------------------------------------------------------
--STEP2.6 -- Below Updates statement to identify the Golden and Merge Records Based on Golden Match Key Values.
----------------------------------------------------------------------


update  LANDING.WORK_MDM_COR_CUSTOMER A 
SET A.MERGE_FLAG='Golden'
Where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden')
and A.MERGE_FLAG ='      ';


update  LANDING.WORK_MDM_COR_CUSTOMER A 
SET A.MERGE_FLAG='Merge'
FROM (select M.SOURCE_KEY1,G.GOLDEN_MATCH_KEY from
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_COR_CUSTOMER where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden')) G,
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_COR_CUSTOMER where WORK_MATCH_GROUP<>'Golden'  ) M
WHERE G.GOLDEN_MATCH_KEY=M.GOLDEN_MATCH_KEY) B
WHERE A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';

update LANDING.WORK_MDM_COR_CUSTOMER A  
SET A.MERGE_FLAG='Merge' , A.GOLDEN_MATCH_KEY=A.WORK_MATCH_GROUP
where MERGE_FLAG ='      ';

----------------------------------------------------------------------
--STEP2.7 -- DOB Merge , If Incase any DOB is null
----------------------------------------------------------------------
update  LANDING.WORK_MDM_COR_CUSTOMER A 
SET A.MERGE_FLAG='DOB_Merge',A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (
select C.SOURCE_KEY1 as SOURCE_KEY1,D.SOURCE_KEY1 as GOLDEN_MATCH_KEY FROM
(select * from LANDING.WORK_MDM_COR_CUSTOMER where BIRTH_DT IS NULL and MERGE_FLAG='Golden' )C
INNER JOIN (select *,
ROW_NUMBER() OVER(PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),
    UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP) ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) as ROW_NUM
    FROM LANDING.WORK_MDM_COR_CUSTOMER where MERGE_FLAG='Golden' and BIRTH_DT IS NOT NULL ) D
ON COALESCE(C.FIRST_NM,'~')=COALESCE(D.FIRST_NM,'~')
AND COALESCE(C.LAST_NM,'~')=COALESCE(D.LAST_NM,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE1,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE1,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE2,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE2,'~') 
AND COALESCE(C.PRIMARY_CITY,'~')=COALESCE(D.PRIMARY_CITY,'~') 
AND COALESCE(C.PRIMARY_STATE,'~')=COALESCE(D.PRIMARY_STATE,'~')
AND COALESCE(C.PRIMARY_ZIP,'~')=COALESCE(D.PRIMARY_ZIP,'~')
and D.ROW_NUM=1) B
where A.SOURCE_KEY1=B.SOURCE_KEY1;
----------------------------------------------------------------------
--STEP2.8 DOB Merge
----------------------------------------------------------------------
update  LANDING.WORK_MDM_COR_CUSTOMER A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select DOB.GOLDEN_MATCH_KEY AS GOLDEN_MATCH_KEY,
M.SOURCE_KEY1 as SOURCE_KEY1 FROM
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_COR_CUSTOMER  
where MERGE_FLAG='DOB_Merge') DOB,
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_COR_CUSTOMER 
where MERGE_FLAG='Merge') M
where DOB.SOURCE_KEY1=M.GOLDEN_MATCH_KEY) B
where A.MERGE_FLAG='Merge'
AND A.SOURCE_KEY1=B.SOURCE_KEY1;
----------------------------------------------------------------------
--STEP2.9 DOB Merge
----------------------------------------------------------------------
update LANDING.WORK_MDM_COR_CUSTOMER SET MERGE_FLAG='Merge'
where MERGE_FLAG='DOB_Merge'
