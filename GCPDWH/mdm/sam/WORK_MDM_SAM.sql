----------------------------------------------------------------------
--Overall flow of these script is
--Step1     Prepare the SAM Customer data for the MDM process
--Step2     Update the MERGE_FLAG column using the MERGE_CHECK1_CTL and MERGE_CHECK2_CTL.
--Step2.1   If MERGE_CHECK1_CTL=0 and MERGE_CHECK2_CTL=0 Then Dont Consider those records for MDM Process. All Required Column are having Null Values.
--Step2.2   If MERGE_CHECK1_CTL=1 and MERGE_CHECK2_CTL=1 Then treat that records as Golden record specific to Source System. Adress and Email Id are Unique. It is not merged to any transaction in given source system data.
--Step2.3.0 If MERGE_CHECK1_CTL+MERGE_CHECK2_CTL>=2 Then Identify the Golden and Merge Records from data set. 
--Step2.3.1 To Take the Latest transaction and It is based on Source record creation date and Source record Id (Example: Customer_ID). 
--Step2.3.2 Identify the First record in the Group as "Golden" and the remaining transaction in that group as "Merge".
--Step2.4   If MERGE_CHECK1_CTL=1 and MERGE_CHECK2_CTL=0 Then consider all these transaction as "Golden". It is due to the transaction are unique and not merged with any other records in that group. The Primary Email Address is Null for all these transactions.
--Step2.5   If MERGE_CHECK1_CTL=0 and MERGE_CHECK2_CTL=1 Then consider all these transaction as "Golden". It is due to the transaction are unique and not merged with any other records in that group. The Primary Address Line1 is Null for all these transactions. 
--Step2.6   Delete the records which are not required for MDM Process.[It Could be Source Data Issue and they are not providing all required information for MDM process or Report these transaction as an Issue]
----------------------------------------------------------------------
--STEP1
----------------------------------------------------------------------
CREATE OR REPLACE TABLE LANDING.WORK_MDM_SAM AS 
SELECT
CAST(SOURCE_KEY1 AS STRING) as SOURCE_KEY1,
CAST(SOURCE_KEY2 AS STRING) as SOURCE_KEY2,
CAST(SOURCE_KEY3 AS STRING) as SOURCE_KEY3,
SOURCE_KEY1_DESC,
SOURCE_KEY2_DESC,	
SOURCE_KEY3_DESC,
SOURCE_SYSTEM_CD,
FIRST_NM,
LAST_NM,
MIDDLE_NM,
NAME_SUFFIX_CD,
SALUTATION_CD,
CAST(SUBSTR(BIRTH_DT,0,10) AS DATE)  AS BIRTH_DT, -- Changed the Column
GENDER_CD,
MARITAL_STATUS,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
  CASE
    WHEN LENGTH(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
END AS PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
COALESCE(HOME_TELEPHONE_NUM, WORK_PHONE_NUM, OTHER_PHONE_NUM) AS PRIMARY_PHONE_NUM,
RESIDENTIAL_ADDRESS_LINE1,
RESIDENTIAL_ADDRESS_LINE2,
RESIDENTIAL_CITY,
RESIDENTIAL_STATE,
  CASE
    WHEN LENGTH(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
END AS RESIDENTIAL_ZIP,
BILLING_ADDRESS_LINE1,
BILLING_ADDRESS_LINE2,
BILLING_CITY,
BILLING_STATE,
  CASE
    WHEN LENGTH(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
END AS BILLING_ZIP,
OTHER_ADDRESS_LINE1,
OTHER_ADDRESS_LINE2,
OTHER_CITY,
OTHER_STATE,
  CASE
    WHEN LENGTH(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
END AS OTHER_ZIP,
OTHER_EMAIL_ADDRESS,
HOME_TELEPHONE_NUM,
WORK_PHONE_NUM,
OTHER_PHONE_NUM,
SOURCE_CREATE_DATE,
COUNT(CASE WHEN (TRIM(PRIMARY_ADDRESS_LINE1) is null or TRIM(PRIMARY_ADDRESS_LINE1)='') then null else 1 end) OVER(PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),BIRTH_DT,UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),UPPER(PRIMARY_STATE),UPPER(  CASE
    WHEN LENGTH(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
END)) AS MERGE_CHECK1_CTL,
COUNT(CASE WHEN (TRIM(PRIMARY_EMAIL_ADDRESS) is null or TRIM(PRIMARY_EMAIL_ADDRESS)='') then null else 1 end) OVER(PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),BIRTH_DT,UPPER(PRIMARY_EMAIL_ADDRESS)) AS MERGE_CHECK2_CTL,
'      ' as MERGE_FLAG,
CAST(NULL AS STRING) as ADDRESS_MATCH_SOURCE_KEY,  -- RENAMED
CAST(NULL AS INT64) AS CUSTOMER_MDM_KEY,
CAST(NULL AS STRING) AS WORK_MATCH_GROUP,
CAST(NULL AS STRING) AS MDM_MATCH_GROUP,
CAST(NULL AS BYTES) AS HOME_MD5_KEY,
CAST(NULL AS BYTES) AS MAILING_MD5_KEY,
CAST(NULL AS BYTES) AS OTHER_MD5_KEY,
CAST(NULL AS STRING) AS EMAIL_MATCH_SOURCE_KEY, -- New Column
CAST(NULL AS STRING) AS ADDRESS_MATCH_DESC, -- New Column
CAST(NULL AS STRING) AS EMAIL_MATCH_DESC, -- New Column
CAST(NULL AS STRING) AS GOLDEN_MATCH_KEY, -- New Column
REGEXP_REPLACE(CONCAT( IFNULL(UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE1)),''),
                          IFNULL(UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE2)),''), 
						  IFNULL(UPPER(TRIM(RESIDENTIAL_CITY)),''), 
						  IFNULL(UPPER(TRIM(RESIDENTIAL_STATE)),''), 
						  IFNULL(UPPER(TRIM(RESIDENTIAL_ZIP)),'')),
				  '[^a-zA-Z0-9]','') AS ADDRESS_MATCH_KEY1, -- New Column
REGEXP_REPLACE(CONCAT( IFNULL(UPPER(TRIM(BILLING_ADDRESS_LINE1)),''),
                          IFNULL(UPPER(TRIM(BILLING_ADDRESS_LINE2)),''), 
						  IFNULL(UPPER(TRIM(BILLING_CITY)),''), 
						  IFNULL(UPPER(TRIM(BILLING_STATE)),''), 
						  IFNULL(UPPER(TRIM(BILLING_ZIP)),'')),
				  '[^a-zA-Z0-9]','') AS ADDRESS_MATCH_KEY2 -- New Column
FROM (
SELECT
TRIM(A.CUSTOMER_ID) AS SOURCE_KEY1,
CONCAT(TRIM(A.MEMBER_ID),TRIM(A.ASSOC_CD)) AS SOURCE_KEY2,
'' as SOURCE_KEY3,
'CUSTOMER_ID' as SOURCE_KEY1_DESC,
'MEMBERSHIP_NUM_9' as SOURCE_KEY2_DESC,	
'' as SOURCE_KEY3_DESC,
'SAM' as SOURCE_SYSTEM_CD,
upper(TRIM(A.FIRST_NM)) AS FIRST_NM,
upper(TRIM(A.LAST_NM)) AS LAST_NM,
upper(TRIM(A.MIDDLE_INITIAL)) AS MIDDLE_NM,
CAST(NULL AS STRING) AS NAME_SUFFIX_CD,  
CAST(NULL AS STRING) AS SALUTATION_CD,
CASE
        WHEN PARSE_DATE('%Y-%m-%d',SUBSTR(BIRTH_DT,0,10)) < PARSE_DATE('%Y-%m-%d', '1910-01-01') OR PARSE_DATE('%Y-%m-%d',SUBSTR(BIRTH_DT,0,10)) > DATE_SUB(CURRENT_DATE(),INTERVAL 10 YEAR) THEN NULL
        ELSE BIRTH_DT
      END AS BIRTH_DT,
upper(TRIM(A.gender)) AS GENDER_CD,
upper(TRIM(A.marital_status)) AS MARITAL_STATUS,
CASE WHEN B.ADDRESS_LINE1 IS NULL 
	THEN CASE WHEN C.ADDRESS_LINE1 IS NULL 
		THEN UPPER(D.ADDRESS_LINE1) 
	    ELSE UPPER(C.ADDRESS_LINE1)
		END
	ELSE UPPER(B.ADDRESS_LINE1)
	END AS PRIMARY_ADDRESS_LINE1,
CASE WHEN B.ADDRESS_LINE1 IS NULL 
	THEN CASE WHEN C.ADDRESS_LINE2 IS NULL 
		THEN UPPER(D.ADDRESS_LINE2) 
	    ELSE UPPER(C.ADDRESS_LINE2)
		END
	ELSE UPPER(B.ADDRESS_LINE2)
	END AS PRIMARY_ADDRESS_LINE2,
CASE WHEN B.ADDRESS_LINE1 IS NULL 
	THEN CASE WHEN C.CITY IS NULL 
		THEN UPPER(D.CITY) 
	    ELSE UPPER(C.CITY)
		END
	ELSE UPPER(B.CITY)
	END AS PRIMARY_CITY,
CASE WHEN B.ADDRESS_LINE1 IS NULL 
	THEN CASE WHEN C.STATE IS NULL
		THEN UPPER(D.STATE) 
	    ELSE UPPER(C.STATE)
		END
	ELSE UPPER(B.STATE)
	END AS PRIMARY_STATE,
CASE WHEN B.ADDRESS_LINE1 IS NULL 
	THEN CASE WHEN C.ZIP IS NULL
		THEN UPPER(D.ZIP) 
	    ELSE UPPER(C.ZIP)
		END
	ELSE UPPER(B.ZIP)
	END AS PRIMARY_ZIP,
UPPER(TRIM(EMAIL_ADDRESS)) AS PRIMARY_EMAIL_ADDRESS,
upper(TRIM(B.ADDRESS_LINE1)) AS RESIDENTIAL_ADDRESS_LINE1,
upper(TRIM(B.ADDRESS_LINE2)) AS RESIDENTIAL_ADDRESS_LINE2,
upper(TRIM(B.CITY)) AS RESIDENTIAL_CITY,
upper(TRIM(B.STATE)) AS RESIDENTIAL_STATE,
TRIM(B.ZIP) AS RESIDENTIAL_ZIP,
UPPER(C.ADDRESS_LINE1) AS BILLING_ADDRESS_LINE1, 
UPPER(C.ADDRESS_LINE2) AS BILLING_ADDRESS_LINE2, 
UPPER(C.CITY) AS BILLING_CITY, 
UPPER(C.STATE) AS BILLING_STATE,
C.ZIP AS BILLING_ZIP, 
UPPER(D.ADDRESS_LINE1) AS OTHER_ADDRESS_LINE1, 
UPPER(D.ADDRESS_LINE2) AS OTHER_ADDRESS_LINE2, 
UPPER(D.CITY) AS OTHER_CITY, 
UPPER(D.STATE) AS OTHER_STATE,
D.ZIP AS OTHER_ZIP,
CAST(NULL AS STRING) AS OTHER_EMAIL_ADDRESS,
	CASE WHEN HOME_PHONE_NUMBER='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(HOME_PHONE_NUMBER,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(HOME_PHONE_NUMBER,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(HOME_PHONE_NUMBER,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(HOME_PHONE_NUMBER,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(HOME_PHONE_NUMBER,'[^a-zA-Z0-9]',''),1,10)
END END AS HOME_TELEPHONE_NUM ,
CASE WHEN CELL_PHONE_NUMBER='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(CELL_PHONE_NUMBER,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(CELL_PHONE_NUMBER,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(CELL_PHONE_NUMBER,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(CELL_PHONE_NUMBER,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(CELL_PHONE_NUMBER,'[^a-zA-Z0-9]',''),1,10)
END END AS WORK_PHONE_NUM ,
CASE WHEN WORK_PHONE_NUMBER ='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(WORK_PHONE_NUMBER,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(WORK_PHONE_NUMBER,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(WORK_PHONE_NUMBER,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(WORK_PHONE_NUMBER,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(WORK_PHONE_NUMBER,'[^a-zA-Z0-9]',''),1,10)
END END AS OTHER_PHONE_NUM ,
PARSE_DATE('%Y-%m-%d',SUBSTR(A.CREATE_TM,0,10)) AS SOURCE_CREATE_DATE
from LANDING.WORK_SAM_CUSTOMERS A
LEFT OUTER JOIN
(SELECT 
	CUSTOMER_ID,
	TRIM(ADDRESS1) AS ADDRESS_LINE1,
	TRIM(ADDRESS2) AS ADDRESS_LINE2,
	TRIM(CITY) AS CITY,
	TRIM(STATE) AS STATE,
	TRIM(ZIP) AS ZIP
	FROM LANDING.WORK_SAM_CUSTOMER_ADDRESSES
	WHERE UPPER(LTRIM(RTRIM(address_type))) in ('H','HM','')
) B ON TRIM(A.CUSTOMER_ID)=TRIM(B.CUSTOMER_ID) 
LEFT OUTER JOIN
(SELECT 
	CUSTOMER_ID,
	TRIM(ADDRESS1) AS ADDRESS_LINE1,
	TRIM(ADDRESS2) AS ADDRESS_LINE2,
	TRIM(CITY) AS CITY,
	TRIM(STATE) AS STATE,
	TRIM(ZIP) AS ZIP
	FROM LANDING.WORK_SAM_CUSTOMER_ADDRESSES
	WHERE UPPER(LTRIM(RTRIM(address_type))) in ('B')
) C ON TRIM(A.CUSTOMER_ID)=TRIM(C.CUSTOMER_ID)
LEFT OUTER JOIN
(SELECT 
	CUSTOMER_ID,
	TRIM(ADDRESS1) AS ADDRESS_LINE1,
	TRIM(ADDRESS2) AS ADDRESS_LINE2,
	TRIM(CITY) AS CITY,
	TRIM(STATE) AS STATE,
	TRIM(ZIP) AS ZIP
	FROM LANDING.WORK_SAM_CUSTOMER_ADDRESSES
	WHERE UPPER(LTRIM(RTRIM(address_type))) in ('T')
) D ON TRIM(A.CUSTOMER_ID)=TRIM(D.CUSTOMER_ID));

----------------------------------------------------------------------
--STEP 1.3
----------------------------------------------------------------------
INSERT INTO
  LANDING.MDM_CUSTOMER_EXCEPTIONS ( SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,	
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
	MIDDLE_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
	PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    BILLING_ADDRESS_LINE1,
    BILLING_ADDRESS_LINE2,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
    OTHER_ADDRESS_LINE1,
    OTHER_ADDRESS_LINE2,
    OTHER_CITY,
    OTHER_STATE,
    OTHER_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CREATE_DTTIME)
SELECT
    SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,	
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,    
    FIRST_NM,
    LAST_NM,
	MIDDLE_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
	PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    BILLING_ADDRESS_LINE1,
    BILLING_ADDRESS_LINE2,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
    OTHER_ADDRESS_LINE1,
    OTHER_ADDRESS_LINE2,
    OTHER_CITY,
    OTHER_STATE,
    OTHER_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CURRENT_DATETIME()
FROM LANDING.WORK_MDM_SAM
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR ((PRIMARY_ADDRESS_LINE1 IS NULL  OR PRIMARY_ADDRESS_LINE1 ='') and  PRIMARY_EMAIL_ADDRESS is  null);
  
----------------------------------------------------------------------
--STEP 1.3
----------------------------------------------------------------------
DELETE FROM LANDING.WORK_MDM_SAM
WHERE REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR ((PRIMARY_ADDRESS_LINE1 IS NULL  OR PRIMARY_ADDRESS_LINE1 ='') and  PRIMARY_EMAIL_ADDRESS is  null);

----------------------------------------------------------------------
--STEP2.1
----------------------------------------------------------------------
update  LANDING.WORK_MDM_SAM set MERGE_FLAG='Ignore'
where MERGE_FLAG ='      ' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)=0
and not (HOME_TELEPHONE_NUM is not null or WORK_PHONE_NUM is not null or OTHER_PHONE_NUM is not null);
----------------------------------------------------------------------
--STEP2.2
----------------------------------------------------------------------
update  LANDING.WORK_MDM_SAM set MERGE_FLAG='Golden',GOLDEN_MATCH_KEY=SOURCE_KEY1
where MERGE_FLAG ='      ' 
AND MERGE_CHECK2_CTL in (0,1) and MERGE_CHECK1_CTL in (0,1);

----------------------------------------------------------------------
--STEP2.3 -- This Update statement to identify the group where FIRST_NAME,LAST_NAME and BIRTH_DT are same.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_SAM D
SET D.WORK_MATCH_GROUP=C.MATCH_SOURCE_KEY
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) MATCH_SOURCE_KEY
from LANDING.WORK_MDM_SAM where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      ';
----------------------------------------------------------------------
--STEP2.4 -- Below Updates statement to identify the groups where FIRST_NAME,LAST_NAME, BIRTH_DT and ADDRESS are same from STEP2.3.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_SAM D
SET D.ADDRESS_MATCH_SOURCE_KEY=C.ADDRESS_MATCH_SOURCE_KEY,D.ADDRESS_MATCH_DESC='Merge' -- ADDRESS_MATCH
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY WORK_MATCH_GROUP,UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) ADDRESS_MATCH_SOURCE_KEY
from LANDING.WORK_MDM_SAM where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2
) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      ';
-----------
update  LANDING.WORK_MDM_SAM A set A.ADDRESS_MATCH_DESC ='Golden' -- ADDRESS_MATCH Golden Record
where exists (select 1 from 
(select SOURCE_KEY1,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) AS ROW_NUM  from LANDING.WORK_MDM_SAM where 
MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY1=A.SOURCE_KEY1 and ROW_NUM=1)
and MERGE_FLAG ='      ';

update LANDING.WORK_MDM_SAM SET EMAIL_MATCH_SOURCE_KEY=ADDRESS_MATCH_SOURCE_KEY, EMAIL_MATCH_DESC=ADDRESS_MATCH_DESC
where MERGE_FLAG ='      ' and MERGE_CHECK2_CTL=0 and MERGE_CHECK1_CTL>=2
and PRIMARY_EMAIL_ADDRESS is null;
 
----------------------------------------------------------------------
--STEP2.5 -- Below Updates statement to identify the groups where FIRST_NAME,LAST_NAME, BIRTH_DT and EMAIL are same from STEP2.3.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_SAM D
SET D.EMAIL_MATCH_SOURCE_KEY=C.EMAIL_MATCH_SOURCE_KEY,D.EMAIL_MATCH_DESC='Merge' -- EMAIL MATCH
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY WORK_MATCH_GROUP,UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_EMAIL_ADDRESS)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) EMAIL_MATCH_SOURCE_KEY
from LANDING.WORK_MDM_SAM where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2
) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      '
and PRIMARY_EMAIL_ADDRESS is not null;

---------------

update  LANDING.WORK_MDM_SAM A set A.EMAIL_MATCH_DESC ='Golden' -- EMAIL_MATCH Golden Record
where exists (select 1 from 
(select SOURCE_KEY1,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_EMAIL_ADDRESS)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) AS ROW_NUM  from LANDING.WORK_MDM_SAM where 
MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY1=A.SOURCE_KEY1 and ROW_NUM=1)
and MERGE_FLAG ='      '
and PRIMARY_EMAIL_ADDRESS is not null;

----------------------------------------------------------------------
--STEP2.5 -- Below Updates statement to identify the Golden Match Key Based on Address and Email Match Keys Values.
----------------------------------------------------------------------

update  LANDING.WORK_MDM_SAM A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_SAM where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden','Merge')
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';
---------------
update  LANDING.WORK_MDM_SAM A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select M.SOURCE_KEY1,G.GOLDEN_MATCH_KEY from
(select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_SAM where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden','Merge') and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) G,
(select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_SAM where ADDRESS_MATCH_DESC ='Merge' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) M
WHERE G.ADDRESS_MATCH_SOURCE_KEY=M.ADDRESS_MATCH_SOURCE_KEY
) B
where A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';

----------------------------------------------------------------------
--STEP2.6 -- Below Updates statement to identify the Golden and Merge Records Based on Golden Match Key Values.
----------------------------------------------------------------------


update  LANDING.WORK_MDM_SAM A 
SET A.MERGE_FLAG='Golden'
Where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden')
and A.MERGE_FLAG ='      ';


update  LANDING.WORK_MDM_SAM A 
SET A.MERGE_FLAG='Merge'
FROM (select M.SOURCE_KEY1,G.GOLDEN_MATCH_KEY from
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_SAM where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden')) G,
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_SAM where WORK_MATCH_GROUP<>'Golden'  ) M
WHERE G.GOLDEN_MATCH_KEY=M.GOLDEN_MATCH_KEY) B
WHERE A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';

update LANDING.WORK_MDM_SAM A  
SET A.MERGE_FLAG='Merge' , A.GOLDEN_MATCH_KEY=A.WORK_MATCH_GROUP
where MERGE_FLAG ='      ';

----------------------------------------------------------------------
--STEP2.7 -- DOB Merge , If Incase any DOB is null
----------------------------------------------------------------------
update  LANDING.WORK_MDM_SAM A 
SET A.MERGE_FLAG='DOB_Merge',A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (
select C.SOURCE_KEY1 as SOURCE_KEY1,D.SOURCE_KEY1 as GOLDEN_MATCH_KEY FROM
(select * from LANDING.WORK_MDM_SAM where BIRTH_DT IS NULL and MERGE_FLAG='Golden' )C
INNER JOIN (select *,
ROW_NUMBER() OVER(PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),
    UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP) ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) as ROW_NUM
    FROM LANDING.WORK_MDM_SAM where MERGE_FLAG='Golden' and BIRTH_DT IS NOT NULL ) D
ON COALESCE(C.FIRST_NM,'~')=COALESCE(D.FIRST_NM,'~')
AND COALESCE(C.LAST_NM,'~')=COALESCE(D.LAST_NM,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE1,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE1,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE2,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE2,'~') 
AND COALESCE(C.PRIMARY_CITY,'~')=COALESCE(D.PRIMARY_CITY,'~') 
AND COALESCE(C.PRIMARY_STATE,'~')=COALESCE(D.PRIMARY_STATE,'~')
AND COALESCE(C.PRIMARY_ZIP,'~')=COALESCE(D.PRIMARY_ZIP,'~')
and D.ROW_NUM=1) B
where A.SOURCE_KEY1=B.SOURCE_KEY1;
----------------------------------------------------------------------
--STEP2.8 DOB Merge
----------------------------------------------------------------------
update  LANDING.WORK_MDM_SAM A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select DOB.GOLDEN_MATCH_KEY AS GOLDEN_MATCH_KEY,
M.SOURCE_KEY1 as SOURCE_KEY1 FROM
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_SAM  
where MERGE_FLAG='DOB_Merge') DOB,
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_SAM 
where MERGE_FLAG='Merge') M
where DOB.SOURCE_KEY1=M.GOLDEN_MATCH_KEY) B
where A.MERGE_FLAG='Merge'
AND A.SOURCE_KEY1=B.SOURCE_KEY1;
----------------------------------------------------------------------
--STEP2.9 DOB Merge
----------------------------------------------------------------------
update LANDING.WORK_MDM_SAM SET MERGE_FLAG='Merge'
where MERGE_FLAG='DOB_Merge'
