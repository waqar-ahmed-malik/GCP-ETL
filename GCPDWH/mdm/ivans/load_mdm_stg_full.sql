--CREATE OR REPLACE TABLE LANDING.WORK_MDM_IVANS_IE AS 
--SELECT
--CAST(SOURCE_KEY1 AS STRING) as SOURCE_KEY1,
--CAST(SOURCE_KEY2 AS STRING) as SOURCE_KEY2,
--CONCAT(SOURCE_KEY1, IFNULL(SOURCE_KEY2,'')) as SOURCE_KEY3,
--SOURCE_KEY1_DESC,
--SOURCE_KEY2_DESC,	
--'FIRST_VALUE_MATCH' AS SOURCE_KEY3_DESC,
--SOURCE_SYSTEM_CD,
--TRIM(FIRST_NM) AS FIRST_NM,
--TRIM(LAST_NM) AS LAST_NM,
--TRIM(MIDDLE_NM) AS MIDDLE_NM,
--PREFFERRED_NM,
--DECEASED_IND,
--NAME_SUFFIX_CD,
--SALUTATION_CD,
--CASE
--WHEN BIRTH_DATE < PARSE_DATE('%Y-%m-%d', '1910-01-01') OR BIRTH_DATE > DATE_SUB(CURRENT_DATE(),INTERVAL 10 YEAR) THEN NULL
--ELSE BIRTH_DATE
--END BIRTH_DT,
--GENDER_CD,
--MARITAL_STATUS,
--UPPER(TRIM(PRIMARY_ADDRESS_LINE1)) AS PRIMARY_ADDRESS_LINE1,
--UPPER(TRIM(PRIMARY_ADDRESS_LINE2)) AS PRIMARY_ADDRESS_LINE2,
--UPPER(TRIM(PRIMARY_CITY)) AS PRIMARY_CITY,
--UPPER(TRIM(PRIMARY_STATE)) AS PRIMARY_STATE,
--  CASE
--    WHEN LENGTH(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')
--    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
--    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
--  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
--END AS PRIMARY_ZIP,
--PRIMARY_EMAIL_ADDRESS,
--COALESCE(HOME_TELEPHONE_NUM, WORK_PHONE_NUM) AS PRIMARY_PHONE_NUM,
--UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE1)) AS RESIDENTIAL_ADDRESS_LINE1,
--UPPER(TRIM(RESIDENTIAL_ADDRESS_LINE2)) AS RESIDENTIAL_ADDRESS_LINE2,
--UPPER(TRIM(RESIDENTIAL_CITY)) AS RESIDENTIAL_CITY,
--UPPER(TRIM(RESIDENTIAL_STATE)) AS RESIDENTIAL_STATE,
--  CASE
--    WHEN LENGTH(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')
--    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
--    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
--  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
--END AS RESIDENTIAL_ZIP,
--OTHER_EMAIL_ADDRESS,
--HOME_TELEPHONE_NUM ,
--WORK_PHONE_NUM ,
--OTHER_PHONE_NUM ,
--CAST(NULL AS STRING) AS FIRST_VALUE_MATCH_GROUP,
--COUNT(CASE
--      WHEN (TRIM(PRIMARY_ADDRESS_LINE1) IS NULL OR TRIM(PRIMARY_ADDRESS_LINE1)='') THEN NULL
--      ELSE 1 END) OVER(PARTITION BY UPPER(FIRST_NM),
--    UPPER(LAST_NM),
--    UPPER(PRIMARY_ADDRESS_LINE1),
--    UPPER(PRIMARY_ADDRESS_LINE2),
--    UPPER(PRIMARY_CITY),
--    UPPER(PRIMARY_STATE),
--    UPPER(PRIMARY_ZIP)) AS MERGE_CHECK1_CTL, 
--COUNT(CASE
--      WHEN (TRIM(PRIMARY_EMAIL_ADDRESS) IS NULL OR TRIM(PRIMARY_EMAIL_ADDRESS)='') THEN NULL
--      ELSE 1 END) OVER(PARTITION BY UPPER(FIRST_NM),
--    UPPER(LAST_NM),
--    UPPER(PRIMARY_EMAIL_ADDRESS)) AS MERGE_CHECK2_CTL,
--  '      ' AS MERGE_FLAG,
--CAST(NULL AS INT64) AS CUSTOMER_MDM_KEY, 
--CAST(NULL AS STRING) AS MATCH_KEY, 
--CAST(NULL AS BYTES) AS HOME_MD5_KEY, 
--SOURCE_CREATE_DATE
--FROM (
--SELECT
--  DISTINCT
--  TBL.AGREEMENT_NUM AS SOURCE_KEY1,
--  CASE
--    WHEN PRODUCT_TYPE='Auto' THEN TBL.DRIVER_SOURCE_ID
--    ELSE NULL
--  END AS SOURCE_KEY2,
--  CAST(NULL AS STRING) AS SOURCE_KEY3,
--  'AGREEMENT_NUM' AS SOURCE_KEY1_DESC,
--  'DRIVER_SOURCE_ID' AS SOURCE_KEY2_DESC,	
--  CAST(NULL AS STRING) AS SOURCE_KEY3_DESC,
--  CONCAT('IVANS_PAS_', PRODUCT_TYPE ) AS SOURCE_SYSTEM_CD,     
--  CASE WHEN 
--  PRODUCT_TYPE='Auto' THEN UPPER(TBL.DRVR_FRST_NM)
--  ELSE UPPER(B1.FRST_NM) END AS FIRST_NM ,  
--  CASE WHEN
--  PRODUCT_TYPE='Auto' THEN UPPER(TBL.DRVR_LST_NM)
--  ELSE UPPER(B1.LST_NM) END AS LAST_NM,
--  CASE WHEN
--  PRODUCT_TYPE='Auto' THEN UPPER(TBL.DRVR_MID_NM)
--  ELSE UPPER(B1.MID_NM) END AS MIDDLE_NM,
--  CAST(NULL AS STRING) AS PREFFERRED_NM,
--  CAST(NULL AS STRING) AS DECEASED_IND,  
--  CAST(NULL AS STRING) AS NAME_SUFFIX_CD,
--  CAST(NULL AS STRING) AS SALUTATION_CD,
--  TBL.BRTH_DT AS BIRTH_DATE,
--  CAST(NULL AS STRING) AS GENDER_CD,
--  CAST(NULL AS STRING) AS MARITAL_STATUS,
--  CASE WHEN ADDR_LN1='' THEN NULL ELSE ADDR_LN1 END AS PRIMARY_ADDRESS_LINE1,
--  CASE WHEN ADDR_LN2='' THEN NULL ELSE ADDR_LN2 END AS PRIMARY_ADDRESS_LINE2,
--  CASE WHEN CTY_NM='' THEN NULL ELSE CTY_NM END AS PRIMARY_CITY,
--  CASE WHEN ST_CD='' THEN NULL ELSE ST_CD END AS PRIMARY_STATE,
--  CASE WHEN ZP_CD='' THEN NULL ELSE ZP_CD END AS PRIMARY_ZIP,
--  CAST(NULL AS STRING) AS PRIMARY_EMAIL_ADDRESS,
--  COALESCE(HOME_TELEPHONE_NUM, WORK_PHONE_NUM) AS PRIMARY_PHONE_NUM,
--  CASE WHEN ADDR_LN1='' THEN NULL ELSE ADDR_LN1 END AS RESIDENTIAL_ADDRESS_LINE1,
--  CASE WHEN ADDR_LN2='' THEN NULL ELSE ADDR_LN2 END AS RESIDENTIAL_ADDRESS_LINE2,
--  CTY_NM AS RESIDENTIAL_CITY,
--  ST_CD AS RESIDENTIAL_STATE,
--  ZP_CD AS RESIDENTIAL_ZIP,
--  CAST(NULL AS STRING) AS OTHER_EMAIL_ADDRESS,
--  CAST(NULL AS STRING) AS BILLING_ADDRESS_LINE1,
--  CAST(NULL AS STRING) AS BILLING_ADDRESS_LINE2,
--  CAST(NULL AS STRING) AS BILLING_CITY,
--  CAST(NULL AS STRING) AS BILLING_STATE,
--  CAST(NULL AS STRING) AS BILLING_ZIP,
--  HOME_TELEPHONE_NUM ,
--  WORK_PHONE_NUM ,
--  CAST(NULL AS STRING) AS OTHER_PHONE_NUM,
--  CURRENT_DATE() AS SOURCE_CREATE_DATE
--FROM (
--  SELECT
--    IPD.*,
--    E1.*
--  FROM
--    CUSTOMER_PRODUCT.INSURANCE_POLICY_DIM IPD--Replace with CUSTOMER_PRODUCT.INSURANCE_POLICY_DIM for full load and LANDING.WORK_INSURANCE_POLICY_DIM for incremental load
--  LEFT OUTER JOIN (
--    SELECT
--      CONCAT(UPPER(E1.DRVR_LST_NM), '~',UPPER(E1.DRVR_FRST_NM), '~',CAST(E1.BRTH_DT AS STRING), '~',CAST(E1.DRVR_NUM AS STRING)) AS DRIVER_SOURCE_ID,
--      E1.DRVR_TYP_CD AS DRIVER_TYP_CD,
--      E1.LIC_ST_CD AS LICENSE_STATE,
--      E1.LIC_DT AS LICENSE_DT,
--      E1.STU_DISC_CD AS STUDENT_DISCOUNT_IND,
--      E1.DRVR_FRST_NM,
--      E1.BRTH_DT,
--	  E1.DRVR_MID_NM,
--      E1.DRVR_LST_NM,
--      E1.DRVR_NUM,
--      E1.DRVR_TRN_IND DRIVING_TRAINING_IND,
--      E1.DFNS_DRVR_DT DEFENSIVE_DRIVER_DT,
--      E1.FILE_ID,
--      E1.TRANS_NUM
--    FROM
--      LANDING.IE_E1_LDG E1) E1
--  ON
--    IPD.SOURCE_ID = CONCAT("IE~",CAST(E1.FILE_ID AS STRING),"~",CAST(E1.TRANS_NUM AS STRING))
--    WHERE ACTIVE_FLG='Y') TBL
--LEFT OUTER JOIN
--  (SELECT 
--  LB1.*,
--    CASE WHEN PHN_NUM1='' THEN NULL ELSE   CASE
--    WHEN LENGTH(REGEXP_REPLACE(PHN_NUM1,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(PHN_NUM1,'[^a-zA-Z0-9]','')
--    WHEN SUBSTR(REGEXP_REPLACE(PHN_NUM1,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(PHN_NUM1,'[^a-zA-Z0-9]',''),2,11)
--  ELSE
--  SUBSTR(REGEXP_REPLACE(PHN_NUM1,'[^a-zA-Z0-9]',''),1,10)
--END END AS HOME_TELEPHONE_NUM ,
--CASE WHEN PHN_NUM2='' THEN NULL ELSE   CASE
--    WHEN LENGTH(REGEXP_REPLACE(PHN_NUM2,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(PHN_NUM2,'[^a-zA-Z0-9]','')
--    WHEN SUBSTR(REGEXP_REPLACE(PHN_NUM2,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(PHN_NUM2,'[^a-zA-Z0-9]',''),2,11)
--  ELSE
--  SUBSTR(REGEXP_REPLACE(PHN_NUM2,'[^a-zA-Z0-9]',''),1,10)
--END END AS WORK_PHONE_NUM   
--  FROM LANDING.IE_B1_LDG LB1) B1
--ON
--  CONCAT("IE~",CAST(B1.FILE_ID AS STRING),"~",CAST(B1.TRANS_NUM AS STRING)) = TBL.SOURCE_ID )

INSERT INTO
  LANDING.MDM_CUSTOMER_EXCEPTIONS ( SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
	  MIDDLE_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
  	PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CREATE_DTTIME)
SELECT
  SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
	  MIDDLE_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
	  PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CURRENT_DATETIME()
FROM
  LANDING.WORK_MDM_IVANS_IE
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR PRIMARY_ADDRESS_LINE1 IS NULL;

DELETE
FROM
  LANDING.WORK_MDM_IVANS_IE
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR PRIMARY_ADDRESS_LINE1 IS NULL;
  
  -- Updating DOB of duplicate records with same values
  
UPDATE LANDING.WORK_MDM_IVANS_IE TBL1 
SET TBL1.BIRTH_DT=TBL2.BIRTH_DT
FROM
(SELECT * FROM (SELECT FIRST_NM, LAST_NM,PRIMARY_ADDRESS_LINE1,PRIMARY_CITY,PRIMARY_STATE,PRIMARY_ZIP,BIRTH_DT,
ROW_NUMBER() OVER(PARTITION BY FIRST_NM, LAST_NM,PRIMARY_ADDRESS_LINE1,PRIMARY_CITY,PRIMARY_STATE,PRIMARY_ZIP ORDER BY SOURCE_CREATE_DATE DESC) RNK FROM
LANDING.WORK_MDM_IVANS_IE WHERE BIRTH_DT IS NOT NULL) WHERE RNK=1
)TBL2
WHERE TBL1.FIRST_NM=TBL2.FIRST_NM AND TBL1.LAST_NM=TBL2.LAST_NM AND TBL1.PRIMARY_ADDRESS_LINE1=TBL2.PRIMARY_ADDRESS_LINE1
AND TBL1.PRIMARY_CITY=TBL2.PRIMARY_CITY AND TBL1.PRIMARY_STATE=TBL2.PRIMARY_STATE AND TBL1.PRIMARY_ZIP=TBL2.PRIMARY_ZIP  AND TBL1.BIRTH_DT IS NULL;


----------------------------------------------------------------------
--STEP2.1 Following merge logic is unique for this process  as SOURCE_KEY1 & SOURCE_KEY2 is unique
----------------------------------------------------------------------
update  LANDING.WORK_MDM_IVANS_IE set MERGE_FLAG='Ignore'
where MERGE_FLAG ='      ' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)=0
and not (HOME_TELEPHONE_NUM is not null or WORK_PHONE_NUM is not null or OTHER_PHONE_NUM is not null);
----------------------------------------------------------------------
--STEP2.2
----------------------------------------------------------------------
update  LANDING.WORK_MDM_IVANS_IE set MERGE_FLAG='Golden'
where MERGE_FLAG ='      ' 
AND MERGE_CHECK2_CTL in (0,1) and MERGE_CHECK1_CTL in (0,1);
-------------------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_IVANS_IE D
SET D.FIRST_VALUE_MATCH_GROUP=C.FIRST_VALUE_MATCH_GROUP
FROM (select DISTINCT SOURCE_KEY3,FIRST_NM,
FIRST_VALUE(SOURCE_KEY3) OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT ORDER BY SOURCE_CREATE_DATE DESC) FIRST_VALUE_MATCH_GROUP
from LANDING.WORK_MDM_IVANS_IE where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) C
WHERE C.SOURCE_KEY3=D.SOURCE_KEY3 AND C.FIRST_NM=D.FIRST_NM
and D.MERGE_FLAG ='      ';
----------------------------------------------------------------------
--STEP2.3
----------------------------------------------------------------------
update  LANDING.WORK_MDM_IVANS_IE A set A.MERGE_FLAG='Golden' 
where exists (select 1 from 
(select SOURCE_KEY3,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),BIRTH_DT ORDER BY SOURCE_CREATE_DATE DESC) AS ROW_NUM  from LANDING.WORK_MDM_IVANS_IE where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY3=A.SOURCE_KEY3 and ROW_NUM=1)
and MERGE_FLAG ='      ';
----------------------------------------------------------------------
--STEP2.3
----------------------------------------------------------------------
update  LANDING.WORK_MDM_IVANS_IE set MERGE_FLAG='Merge'
where MERGE_FLAG ='      ' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2;
----------------------------------------------------------------------
----------------------------------------------------------------------
--STEP2.6
----------------------------------------------------------------------
update  LANDING.WORK_MDM_IVANS_IE A 
SET A.MERGE_FLAG='DOB_Merge',A.FIRST_VALUE_MATCH_GROUP=B.FIRST_VALUE_MATCH_GROUP
FROM (
select C.SOURCE_KEY3 as SOURCE_KEY3,D.SOURCE_KEY3 as FIRST_VALUE_MATCH_GROUP FROM
(select * from LANDING.WORK_MDM_IVANS_IE where BIRTH_DT IS NULL and MERGE_FLAG='Golden' )C
INNER JOIN (select *,
ROW_NUMBER() OVER(PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),
    UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP) ORDER BY SOURCE_CREATE_DATE DESC) as ROW_NUM
    FROM LANDING.WORK_MDM_IVANS_IE where MERGE_FLAG='Golden' and BIRTH_DT IS NOT NULL ) D
ON COALESCE(C.FIRST_NM,'~')=COALESCE(D.FIRST_NM,'~')
AND COALESCE(C.LAST_NM,'~')=COALESCE(D.LAST_NM,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE1,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE1,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE2,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE2,'~') 
AND COALESCE(C.PRIMARY_CITY,'~')=COALESCE(D.PRIMARY_CITY,'~') 
AND COALESCE(C.PRIMARY_STATE,'~')=COALESCE(D.PRIMARY_STATE,'~')
AND COALESCE(C.PRIMARY_ZIP,'~')=COALESCE(D.PRIMARY_ZIP,'~')
and D.ROW_NUM=1) B
where A.SOURCE_KEY3=B.SOURCE_KEY3;
----------------------------------------------------------------------
--STEP2.7
----------------------------------------------------------------------
update  LANDING.WORK_MDM_IVANS_IE A 
SET A.FIRST_VALUE_MATCH_GROUP=B.FIRST_VALUE_MATCH_GROUP
FROM (select DOB.FIRST_VALUE_MATCH_GROUP AS FIRST_VALUE_MATCH_GROUP,
M.SOURCE_KEY3 as SOURCE_KEY3 FROM
(select SOURCE_KEY3,FIRST_VALUE_MATCH_GROUP from LANDING.WORK_MDM_IVANS_IE  
where MERGE_FLAG='DOB_Merge') DOB,
(select SOURCE_KEY3,FIRST_VALUE_MATCH_GROUP from LANDING.WORK_MDM_IVANS_IE 
where MERGE_FLAG='Merge') M
where DOB.SOURCE_KEY3=M.FIRST_VALUE_MATCH_GROUP) B
where A.MERGE_FLAG='Merge'
AND A.SOURCE_KEY3=B.SOURCE_KEY3;
----------------------------------------------------------------------
--STEP2.8
----------------------------------------------------------------------
update LANDING.WORK_MDM_IVANS_IE SET MERGE_FLAG='Merge'
where MERGE_FLAG='DOB_Merge'