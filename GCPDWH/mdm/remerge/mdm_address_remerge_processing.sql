--For the duplicates records in MDM_CUSTOMER_DIM based upon name and address create a work table WORK_MDM_CUSTOMER_DIM_DUPLICATES 
--with one extra blank columns named master flag and duplicate flag

-- Create work table with address match customers

CREATE OR REPLACE TABLE LANDING.WORK_MDM_CUSTOMER_MERGE AS
WITH DUP_CUSTOMER_ADDRESS_MERGE AS (
SELECT
  T.*
 FROM 
  (SELECT C.CUSTOMER_MDM_KEY,
	FIRST_NM,
	LAST_NM,
	MIDDLE_NM,
	NAME_SUFFIX_CD,
	SALUTATION_CD,
	BIRTH_DT,
	GENDER_CD,
	ADDRESS_LINE1 ,
	ADDRESS_LINE2 ,
	CITY ,
	STATE ,
	ZIP_CD ,
	EMAIL_ADDRESS ,
	PHONE_NUM ,
	SOURCE_SYSTEM_CD,
	CREATE_DTTIME,
	COUNT(*) OVER addrwindow AS RECORD_COUNT,
	CASE WHEN (B.TERM_EXPIRATION_DT) IS NOT NULL THEN DATETIME(TERM_EXPIRATION_DT) 
	     ELSE C.UPDATE_DTTIME END AS UPDATE_DTTIME    
	FROM CUSTOMERS.MDM_CUSTOMER_DIM C 
	LEFT OUTER JOIN (SELECT DISTINCT CUSTOMER_MDM_KEY, MAX(PARSE_DATE('%F', SOURCE_KEY2)) AS TERM_EXPIRATION_DT
	                 FROM CUSTOMER_PRODUCT.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM_CD = 'MEMBERSHIP' GROUP BY CUSTOMER_MDM_KEY)  B ON C.CUSTOMER_MDM_KEY = B.CUSTOMER_MDM_KEY
	WINDOW addrwindow AS (PARTITION BY FIRST_NM, LAST_NM, ADDRESS_LINE1, ADDRESS_LINE2 ,	CITY ,	STATE ,	ZIP_CD)  	
	)T
	WHERE T.RECORD_COUNT > 1)
SELECT TBL.* ,  
  'Address' AS MATCH_TYPE,
  MATCH_MDM_KEY  AS MASTER_MDM_KEY 
  FROM (SELECT A.*,
    ROW_NUMBER() OVER addrwindow AS  ROW_RANK,
	FIRST_VALUE(CUSTOMER_MDM_KEY) OVER addrwindow AS MATCH_MDM_KEY
	FROM DUP_CUSTOMER_ADDRESS_MERGE A
	WINDOW addrwindow AS (PARTITION BY FIRST_NM, LAST_NM, ADDRESS_LINE1, ADDRESS_LINE2 ,	CITY ,	STATE ,	ZIP_CD
                          ORDER BY CASE WHEN SOURCE_SYSTEM_CD = 'MEMBERSHIP' THEN 1 ELSE 2 END  ASC, UPDATE_DTTIME DESC)  						  
	)TBL;
	
-- Insert email match customers into work table
	
INSERT INTO LANDING.WORK_MDM_CUSTOMER_MERGE
WITH DUP_CUSTOMER_EMAIL_MERGE AS (
SELECT
  T.*
 FROM 
  (SELECT C.CUSTOMER_MDM_KEY,
	FIRST_NM,
	LAST_NM,
	MIDDLE_NM,
	NAME_SUFFIX_CD,
	SALUTATION_CD,
	BIRTH_DT,
	GENDER_CD,
	ADDRESS_LINE1 ,
	ADDRESS_LINE2 ,
	CITY ,
	STATE ,
	ZIP_CD ,
	EMAIL_ADDRESS ,
	PHONE_NUM ,
	SOURCE_SYSTEM_CD,
	CREATE_DTTIME,
	COUNT(*) OVER addrwindow AS RECORD_COUNT,
	CASE WHEN (B.TERM_EXPIRATION_DT) IS NOT NULL THEN DATETIME(TERM_EXPIRATION_DT) 
	     ELSE C.UPDATE_DTTIME END AS UPDATE_DTTIME    
	FROM CUSTOMERS.MDM_CUSTOMER_DIM C 
	LEFT OUTER JOIN (SELECT DISTINCT CUSTOMER_MDM_KEY, MAX(PARSE_DATE('%F', SOURCE_KEY2)) AS TERM_EXPIRATION_DT
	                 FROM CUSTOMER_PRODUCT.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM_CD = 'MEMBERSHIP' GROUP BY CUSTOMER_MDM_KEY)  B ON C.CUSTOMER_MDM_KEY = B.CUSTOMER_MDM_KEY
	WHERE EMAIL_ADDRESS IS NOT NULL
	WINDOW addrwindow AS (PARTITION BY FIRST_NM, LAST_NM, EMAIL_ADDRESS)  	
	)T
	WHERE T.RECORD_COUNT > 1
  ),
DUP_CUSTOMER_EMAIL_MERGE2 AS  
  (SELECT E.*, CASE WHEN AD.MASTER_MDM_KEY IS NULL THEN 0 ELSE AD.MASTER_MDM_KEY END AS CALC_MDM_KEY
  FROM (SELECT A.*,
  ROW_NUMBER() OVER addrwindow AS  ROW_RANK,
  FIRST_VALUE(CUSTOMER_MDM_KEY) OVER addrwindow AS MATCH_MDM_KEY,
  'Email' AS MATCH_TYPE
  FROM DUP_CUSTOMER_EMAIL_MERGE A
  WINDOW addrwindow AS (PARTITION BY FIRST_NM, LAST_NM, EMAIL_ADDRESS ORDER BY CASE WHEN SOURCE_SYSTEM_CD = 'MEMBERSHIP' THEN 1 ELSE 2 END  ASC, UPDATE_DTTIME DESC)  						  
  )E LEFT JOIN (SELECT CUSTOMER_MDM_KEY, MASTER_MDM_KEY FROM LANDING.WORK_MDM_CUSTOMER_MERGE) AD ON AD.CUSTOMER_MDM_KEY = E.CUSTOMER_MDM_KEY
	),
DUP_CUSTOMER_EMAIL_MERGE3 AS
(SELECT TBL.* EXCEPT(CALC_MDM_KEY),
MAX(CALC_MDM_KEY) over (partition by MATCH_MDM_KEY) AS CALC_MDM_KEY         
FROM DUP_CUSTOMER_EMAIL_MERGE2 TBL
)
SELECT 
  B.* EXCEPT(CALC_MDM_KEY),
  CASE WHEN CALC_MDM_KEY <> 0 THEN CALC_MDM_KEY
       ELSE B.MATCH_MDM_KEY END AS MASTER_MDM_KEY  
  FROM DUP_CUSTOMER_EMAIL_MERGE3 B  
  WHERE B.CUSTOMER_MDM_KEY not IN (SELECT CUSTOMER_MDM_KEY FROM LANDING.WORK_MDM_CUSTOMER_MERGE);
  
-- Insert Phone num match customers into work table

INSERT INTO LANDING.WORK_MDM_CUSTOMER_MERGE
WITH DUP_CUSTOMER_PHONE_MERGE AS (
SELECT
  T.*
 FROM 
  (SELECT C.CUSTOMER_MDM_KEY,
	FIRST_NM,
	LAST_NM,
	MIDDLE_NM,
	NAME_SUFFIX_CD,
	SALUTATION_CD,
	BIRTH_DT,
	GENDER_CD,
	ADDRESS_LINE1 ,
	ADDRESS_LINE2 ,
	CITY ,
	STATE ,
	ZIP_CD ,
	EMAIL_ADDRESS ,
	PHONE_NUM ,
	SOURCE_SYSTEM_CD,
	CREATE_DTTIME,
	COUNT(*) OVER addrwindow AS RECORD_COUNT,
	CASE WHEN (B.TERM_EXPIRATION_DT) IS NOT NULL THEN DATETIME(TERM_EXPIRATION_DT) 
	     ELSE C.UPDATE_DTTIME END AS UPDATE_DTTIME    
	FROM CUSTOMERS.MDM_CUSTOMER_DIM C 
	LEFT OUTER JOIN (SELECT DISTINCT CUSTOMER_MDM_KEY, MAX(PARSE_DATE('%F', SOURCE_KEY2)) AS TERM_EXPIRATION_DT
	                 FROM CUSTOMER_PRODUCT.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM_CD = 'MEMBERSHIP' GROUP BY CUSTOMER_MDM_KEY)  B ON C.CUSTOMER_MDM_KEY = B.CUSTOMER_MDM_KEY
	WHERE PHONE_NUM IS NOT NULL
	WINDOW addrwindow AS (PARTITION BY FIRST_NM, LAST_NM, PHONE_NUM)  	
	)T
	WHERE T.RECORD_COUNT > 1
  ),
DUP_CUSTOMER_PHONE_MERGE2 AS  
  (SELECT E.*, CASE WHEN AD.MASTER_MDM_KEY IS NULL THEN 0 ELSE AD.MASTER_MDM_KEY END AS CALC_MDM_KEY
  FROM (SELECT A.*,
  ROW_NUMBER() OVER addrwindow AS  ROW_RANK,
  FIRST_VALUE(CUSTOMER_MDM_KEY) OVER addrwindow AS MATCH_MDM_KEY,
  'Phone' AS MATCH_TYPE
  FROM DUP_CUSTOMER_PHONE_MERGE A
  WINDOW addrwindow AS (PARTITION BY FIRST_NM, LAST_NM, PHONE_NUM ORDER BY CASE WHEN SOURCE_SYSTEM_CD = 'MEMBERSHIP' THEN 1 ELSE 2 END  ASC, UPDATE_DTTIME DESC)  						  
  )E LEFT JOIN (SELECT CUSTOMER_MDM_KEY, MASTER_MDM_KEY FROM LANDING.WORK_MDM_CUSTOMER_MERGE) AD ON AD.CUSTOMER_MDM_KEY = E.CUSTOMER_MDM_KEY
	),
DUP_CUSTOMER_PHONE_MERGE3 AS
(SELECT TBL.* EXCEPT(CALC_MDM_KEY),
MAX(CALC_MDM_KEY) over (partition by MATCH_MDM_KEY) AS CALC_MDM_KEY         
FROM DUP_CUSTOMER_PHONE_MERGE2 TBL
)
SELECT 
  B.* EXCEPT(CALC_MDM_KEY),
  CASE WHEN CALC_MDM_KEY <> 0 THEN CALC_MDM_KEY
       ELSE B.MATCH_MDM_KEY END AS MASTER_MDM_KEY  
  FROM DUP_CUSTOMER_PHONE_MERGE3 B  
  WHERE B.CUSTOMER_MDM_KEY not IN (SELECT CUSTOMER_MDM_KEY FROM LANDING.WORK_MDM_CUSTOMER_MERGE);
  

	
-- Create  final merge data set

CREATE OR REPLACE TABLE LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL AS
WITH WORK_MDM_CUSTOMER_MERGE_STAGE AS (SELECT TBL.*,
    CASE WHEN (BIRTH_DT IS NULL OR STAGE_BIRTH_DT  IS NULL) THEN '<13'
	     WHEN ABS(DATE_DIFF(BIRTH_DT, STAGE_BIRTH_DT, YEAR)) >= 13 THEN '>=13'
      ELSE '<13' END  AS DOB_DIFF_TYPE
    FROM (SELECT A.*,
	ROW_NUMBER() OVER addrwindow AS  STAGE_ROW_RANK,
	FIRST_VALUE(CUSTOMER_MDM_KEY) OVER addrwindow AS STAGE_MASTER_MDM_KEY,
	FIRST_VALUE(BIRTH_DT) OVER addrwindow AS STAGE_BIRTH_DT
FROM LANDING.WORK_MDM_CUSTOMER_MERGE A
WINDOW addrwindow AS (PARTITION BY MASTER_MDM_KEY ORDER BY CASE WHEN SOURCE_SYSTEM_CD = 'MEMBERSHIP' THEN 1 ELSE 2 END  ASC, UPDATE_DTTIME DESC)  						  
	)TBL)
SELECT TBL.*,
    CASE WHEN (BIRTH_DT IS NULL OR MASTER_BIRTH_DT  IS NULL) THEN 0
	     ELSE ABS(DATE_DIFF(BIRTH_DT, MASTER_BIRTH_DT, YEAR)) END  AS DOB_DIFF,
	CASE WHEN FINAL_ROW_RANK = 1 THEN 'Golden' ELSE 'Merge' END AS MERGE_FLAG,
	CAST(NULL AS STRING) AS UPDATE_TYPE
    FROM (SELECT A.*,
	ROW_NUMBER() OVER addrwindow AS  FINAL_ROW_RANK,
	FIRST_VALUE(CUSTOMER_MDM_KEY) OVER addrwindow AS FINAL_MASTER_MDM_KEY,
	FIRST_VALUE(BIRTH_DT) OVER addrwindow AS MASTER_BIRTH_DT
FROM WORK_MDM_CUSTOMER_MERGE_STAGE A
WINDOW addrwindow AS (PARTITION BY MASTER_MDM_KEY,DOB_DIFF_TYPE ORDER BY CASE WHEN SOURCE_SYSTEM_CD = 'MEMBERSHIP' THEN 1 ELSE 2 END  ASC, UPDATE_DTTIME DESC)  						  
	)TBL;
			

			
-- Delete master cutomer records if DOB_DIFF is > 13

DELETE FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
WHERE DOB_DIFF > 13
AND FINAL_MASTER_MDM_KEY <> CUSTOMER_MDM_KEY
AND MERGE_FLAG <> 'Golden';

-- Update NULL DOB on golden records from its merge customers

UPDATE LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL G
SET  G.BIRTH_DT = F.BIRTH_DT, UPDATE_TYPE = 'PED'
FROM  ( SELECT * FROM 
(SELECT FINAL_MASTER_MDM_KEY, BIRTH_DT,
ROW_NUMBER() OVER addrwindow AS  ROW_RANK
FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL 
WHERE MERGE_FLAG <> 'Golden'
AND BIRTH_DT IS NOT NULL
WINDOW addrwindow AS (PARTITION BY FINAL_MASTER_MDM_KEY ORDER BY FINAL_ROW_RANK ASC)  
) WHERE ROW_RANK = 1
) F
WHERE G.MERGE_FLAG = 'Golden'
AND G.CUSTOMER_MDM_KEY = G.FINAL_MASTER_MDM_KEY
AND G.BIRTH_DT IS NULL
AND G.CUSTOMER_MDM_KEY = F.FINAL_MASTER_MDM_KEY;
		
-- Update NULL Email on golden records from its merge customers

UPDATE LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL G
SET  G.EMAIL_ADDRESS = F.EMAIL_ADDRESS, UPDATE_TYPE = 'PED'
FROM  ( SELECT * FROM 
(SELECT FINAL_MASTER_MDM_KEY, EMAIL_ADDRESS,
ROW_NUMBER() OVER addrwindow AS  ROW_RANK
FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL 
WHERE MERGE_FLAG <> 'Golden'
AND EMAIL_ADDRESS IS NOT NULL
WINDOW addrwindow AS (PARTITION BY FINAL_MASTER_MDM_KEY ORDER BY FINAL_ROW_RANK ASC)  
) WHERE ROW_RANK = 1
) F
WHERE G.MERGE_FLAG = 'Golden'
AND G.CUSTOMER_MDM_KEY = G.FINAL_MASTER_MDM_KEY
AND G.EMAIL_ADDRESS IS NULL
AND G.CUSTOMER_MDM_KEY = F.FINAL_MASTER_MDM_KEY;
		
-- Update NULL Phone on golden records from its merge customers

UPDATE LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL G
SET  G.PHONE_NUM = F.PHONE_NUM, UPDATE_TYPE = 'PED'
FROM  ( SELECT * FROM 
(SELECT FINAL_MASTER_MDM_KEY, PHONE_NUM,
ROW_NUMBER() OVER addrwindow AS  ROW_RANK
FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL 
WHERE MERGE_FLAG <> 'Golden'
AND PHONE_NUM IS NOT NULL
WINDOW addrwindow AS (PARTITION BY FINAL_MASTER_MDM_KEY ORDER BY FINAL_ROW_RANK ASC)  
) WHERE ROW_RANK = 1
) F
WHERE G.MERGE_FLAG = 'Golden'
AND G.CUSTOMER_MDM_KEY = G.FINAL_MASTER_MDM_KEY
AND G.PHONE_NUM IS NULL
AND G.CUSTOMER_MDM_KEY = F.FINAL_MASTER_MDM_KEY;

-- Updating DOB, Phone, and email in MDM_CUSTOMER_DIM table from WORK table

UPDATE  CUSTOMERS.MDM_CUSTOMER_DIM TBL1
SET
  TBL1.BIRTH_DT = TBL2.BIRTH_DT,
  TBL1.EMAIL_ADDRESS = TBL2.EMAIL_ADDRESS,
  TBL1.PHONE_NUM = TBL2.PHONE_NUM  
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY,BIRTH_DT,EMAIL_ADDRESS,PHONE_NUM
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG = 'Golden' AND UPDATE_TYPE = 'PED' ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;
		
-- Update CUSTOMER_MDM_KEY in Bridge table with FINAL_MASTER_MDM_KEY

UPDATE CUSTOMER_PRODUCT.MDM_CUSTOMER_BRIDGE TBL1
SET CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;
  

		
-- Update CUSTOMER_MDM_KEY in Bridge table with FINAL_MASTER_MDM_KEY

UPDATE CUSTOMERS.MDM_CUSTOMER_CONTACT_DIM TBL1
SET CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;

-- Update CUSTOMER_MDM_KEY in CONNECTSUITE_MEMBER_DIM table with FINAL_MASTER_MDM_KEY

UPDATE CUSTOMER_PRODUCT.CONNECTSUITE_MEMBER_DIM TBL1
SET CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;



-- Update CUSTOMER_MDM_KEY in CONNECTSUITE_MEMBER_TRANSACTIONS_FACT table with FINAL_MASTER_MDM_KEY

UPDATE CUSTOMER_PRODUCT.CONNECTSUITE_MEMBER_TRANSACTIONS_FACT TBL1
SET CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;


-- Update CUSTOMER_MDM_KEY in COR_TRANSACTION_FACT table with FINAL_MASTER_MDM_KEY

UPDATE CUSTOMER_PRODUCT.COR_TRANSACTION_FACT TBL1
SET TBL1.CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;


-- Update CUSTOMER_MDM_KEY in MEMBERSHIP_CUSTOMER_DIM table with FINAL_MASTER_MDM_KEY

UPDATE CUSTOMERS.MEMBERSHIP_CUSTOMER_DIM TBL1
SET CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;
  
-- Update CUSTOMER_MDM_KEY in TRAVEL_TRANSACTION_FACT table with FINAL_MASTER_MDM_KEY

UPDATE CUSTOMER_PRODUCT.TRAVEL_TRANSACTION_FACT TBL1
SET TBL1.CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY;



-- Update CUSTOMER_MDM_KEY in ERS_CALL_FACT table with FINAL_MASTER_MDM_KEY

--UPDATE CUSTOMER_PRODUCT.ERS_CALL_FACT TBL1
--SET CUSTOMER_MDM_KEY = TBL2.FINAL_MASTER_MDM_KEY
--FROM (SELECT CUSTOMER_MDM_KEY, FINAL_MASTER_MDM_KEY
--  FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL
--  WHERE MERGE_FLAG <> 'Golden'  ) TBL2
--WHERE   TBL1.CUSTOMER_MDM_KEY = TBL2.CUSTOMER_MDM_KEY

--Delete the duplicates from MDM_CUSTOMER_DIM base upon duplicate flag from work table

DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM WHERE CUSTOMER_MDM_KEY IN
(SELECT CUSTOMER_MDM_KEY FROM LANDING.WORK_MDM_CUSTOMER_MERGE_FINAL WHERE MERGE_FLAG <> 'Golden')
