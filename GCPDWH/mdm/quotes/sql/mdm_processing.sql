--Overall flow of these script is
--Step0 Prepare the QUOTES Customer data for the MDM process
-- #Step1 update dimension records that have already been tied to records in the bridge table
-- #Step2 Insert records into the bridge table for records that we have a match on the MEMBER_ID
-- #Step3 Insert records into the bridge table for records that we have a match on the name, and address
-- #Step4 Insert records into the bridge table for records that we have a match on the name, and email address
-- #Step5 Insert new records into the dimension table and bridge table for any new members
-- #MDM Process starts by creating the initial work table that contains all customer data currently in the system with fields standardized for MDM

--First step is to update records in the mdm_customer_dim that have previously been linked and then delete those records from the working table
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NAME=CASE WHEN A.FIRST_NAME IS NULL THEN B.FIRST_NAME ELSE A.FIRST_NAME END, 
A.LAST_NAME= CASE WHEN A.LAST_NAME IS NULL THEN B.LAST_NAME ELSE A.LAST_NAME END,
A.NAME_SUFFIX_CD=CASE WHEN A.NAME_SUFFIX_CD IS NULL THEN B.SUFFIX ELSE A.NAME_SUFFIX_CD END,  
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.PRIMARY_EMAIL_ADDRESS ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.QUOTES_ADDRESS_LINE1 =  B.QUOTES_ADDRESS_LINE1,
A.QUOTES_ADDRESS_LINE2 =  B.QUOTES_ADDRESS_LINE2,
A.QUOTES_CITY =  B.QUOTES_CITY,
A.QUOTES_STATE =  B.QUOTES_STATE,
A.QUOTES_ZIP =  B.QUOTES_ZIP,
A.QUOTES_HOME_TELEPHONE_NUM =  B.QUOTES_HOME_TELEPHONE_NUM,
A.QUOTES_BUSINESS_TELEPHONE_NUM =  B.QUOTES_BUSINESS_TELEPHONE_NUM,
A.QUOTES_CREATE_DATE =  B.QUOTES_CREATE_DATE 
FROM (
SELECT 
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
SUFFIX,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY QUOTES_CREATE_DATE DESC) AS DUP_CHECK
FROM `CUSTOMERS.MDM_WORK_QUOTES_STG` C
INNER JOIN CUSTOMERS.MDM_CUSTOMER_BRIDGE D
ON C.QUOTE_NUM=D.SOURCE_KEY1 AND D.SOURCE_SYSTEM='QUOTES'
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--STEP1: previously linked customers are updated, removing those customers from the work table

DELETE FROM `CUSTOMERS.MDM_WORK_QUOTES_STG` A
WHERE A.QUOTE_NUM IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='QUOTES');

--STEP1: previously linked records are deleted
-- STEP1: record count in CUSTOMERS.MDM_WORK_QUOTES_STG is
 select count(0) from `CUSTOMER.MDM_WORK_QUOTES_STG`;
-- STEP1: cleaning up records that have been updated to have the same nk
-- STEP1: updating the bridge table 

UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME,PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE,PRIMARY_ZIP ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NAME, 
LAST_NAME, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP)
B
ON A.FIRST_NAME=B.FIRST_NAME 
AND A.LAST_NAME=B.LAST_NAME 
AND A.PRIMARY_ADDRESS_LINE1=B.PRIMARY_ADDRESS_LINE1 
AND A.PRIMARY_CITY=B.PRIMARY_CITY 
AND A.PRIMARY_STATE=B.PRIMARY_STATE
AND A.PRIMARY_ZIP=B.PRIMARY_STATE
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

--STEP1: bridge table updated
--STEP1: deleting records from customer dim that no longer have any matches 

DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);

--STEP1: finished deleting previous duplicates
--STEP2:  is to update based on the name and address
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NAME=CASE WHEN A.FIRST_NAME IS NULL THEN B.FIRST_NAME ELSE A.FIRST_NAME END, 
A.LAST_NAME= CASE WHEN A.LAST_NAME IS NULL THEN B.LAST_NAME ELSE A.LAST_NAME END,
A.NAME_SUFFIX_CD=CASE WHEN A.NAME_SUFFIX_CD IS NULL THEN B.SUFFIX ELSE A.NAME_SUFFIX_CD END,  
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.PRIMARY_EMAIL_ADDRESS ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.QUOTES_ADDRESS_LINE1 =  B.QUOTES_ADDRESS_LINE1,
A.QUOTES_ADDRESS_LINE2 =  B.QUOTES_ADDRESS_LINE2,
A.QUOTES_CITY =  B.QUOTES_CITY,
A.QUOTES_STATE =  B.QUOTES_STATE,
A.QUOTES_ZIP =  B.QUOTES_ZIP,
A.QUOTES_HOME_TELEPHONE_NUM =  B.QUOTES_HOME_TELEPHONE_NUM,
A.QUOTES_BUSINESS_TELEPHONE_NUM =  B.QUOTES_BUSINESS_TELEPHONE_NUM,
A.QUOTES_CREATE_DATE =  B.QUOTES_CREATE_DATE
FROM (
SELECT 
CUSTOMER_MDM_KEY,
C.FIRST_NAME,
C.LAST_NAME,
SUFFIX,
C.PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
C.PRIMARY_CITY,
C.PRIMARY_STATE,
C.PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY QUOTES_CREATE_DATE DESC) AS DUP_CHECK
FROM 
(
SELECT 
FIRST_NAME,
LAST_NAME,
SUFFIX,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE
FROM
CUSTOMERS.MDM_WORK_QUOTES_STG) C
INNER JOIN 
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ,PRIMARY_ZIP ORDER BY MEM_CREATE_DATE DESC,QUOTES_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND C.PRIMARY_ADDRESS_LINE1=D.PRIMARY_ADDRESS_LINE1 
AND C.PRIMARY_CITY=D.PRIMARY_CITY 
AND C.PRIMARY_STATE=D.PRIMARY_STATE
AND C.PRIMARY_ZIP = D.PRIMARY_ZIP
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--STEP3: customers linked by the name, and address
--STEP3: inserting records into bridge table for records linked by name, birth_date, and address

INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME)
Select 
'QUOTES' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
QUOTE_NUM AS SOURCE_KEY1,
'QUOTE_NUM' AS SOURCE_KEY1_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE,PRIMARY_ZIP ORDER BY MEM_CREATE_DATE DESC,QUOTES_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) C
INNER JOIN 
(SELECT
QUOTE_NUM,
FIRST_NAME,
LAST_NAME, 
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP
from CUSTOMERS.MDM_WORK_QUOTES_STG
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND C.PRIMARY_ADDRESS_LINE1=D.PRIMARY_ADDRESS_LINE1 
AND C.PRIMARY_CITY=D.PRIMARY_CITY 
AND C.PRIMARY_STATE=D.PRIMARY_STATE
AND C.PRIMARY_ZIP=D.PRIMARY_ZIP
AND C.DUP_CHECK=1;

--DELETE FROM WORK TABLE
DELETE FROM CUSTOMERS.MDM_WORK_QUOTES_STG A
WHERE A.QUOTE_NUM IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='QUOTES');

-- STEP2: previously linked records are deleted
-- STEP2: record count in CUSTOMERS.MDM_WORK_QUOTES_STG is 
 select count(0) from CUSTOMERS.MDM_WORK_QUOTES_STG;
-- STEP3: cleaning up records that have been updated to have the same nk
-- STEP3: updating the bridge table 

UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE,PRIMARY_ZIP ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NAME, 
LAST_NAME,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP)
B
ON A.FIRST_NAME=B.FIRST_NAME 
AND A.LAST_NAME=B.LAST_NAME 
AND A.PRIMARY_ADDRESS_LINE1=B.PRIMARY_ADDRESS_LINE1 
AND A.PRIMARY_CITY=B.PRIMARY_CITY 
AND A.PRIMARY_STATE=B.PRIMARY_STATE
AND A.PRIMARY_ZIP=B.PRIMARY_ZIP
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

-- STEP3: bridge table updated
-- STEP3: deleting records from customer dim that no longer have any matches 

DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);

--Step4 is to update based on the name, and email address
--STEP4: starting update of customer dim for records linked on the name and email address
--starting update of customer dim for records linked on the name, birth date, and email address

UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NAME=CASE WHEN A.FIRST_NAME IS NULL THEN B.FIRST_NAME ELSE A.FIRST_NAME END, 
A.LAST_NAME= CASE WHEN A.LAST_NAME IS NULL THEN B.LAST_NAME ELSE A.LAST_NAME END,
A.NAME_SUFFIX_CD=CASE WHEN A.NAME_SUFFIX_CD IS NULL THEN B.SUFFIX ELSE A.NAME_SUFFIX_CD END, 
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.PRIMARY_EMAIL_ADDRESS ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.QUOTES_ADDRESS_LINE1 =  B.QUOTES_ADDRESS_LINE1,
A.QUOTES_ADDRESS_LINE2 =  B.QUOTES_ADDRESS_LINE2,
A.QUOTES_CITY =  B.QUOTES_CITY,
A.QUOTES_STATE =  B.QUOTES_STATE,
A.QUOTES_ZIP =  B.QUOTES_ZIP,
A.QUOTES_HOME_TELEPHONE_NUM =  B.QUOTES_HOME_TELEPHONE_NUM,
A.QUOTES_BUSINESS_TELEPHONE_NUM =  B.QUOTES_BUSINESS_TELEPHONE_NUM,
A.QUOTES_CREATE_DATE =  B.QUOTES_CREATE_DATE
from
(
SELECT
CUSTOMER_MDM_KEY,
C.FIRST_NAME,
C.LAST_NAME,
SUFFIX,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
C.PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY QUOTES_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_WORK_QUOTES_STG C
INNER JOIN 
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, PRIMARY_EMAIL_ADDRESS ORDER BY MEM_CREATE_DATE DESC, QUOTES_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND C.PRIMARY_EMAIL_ADDRESS=D.PRIMARY_EMAIL_ADDRESS
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--STEP4: customers linked by the name and email address
-- STEP4: inserting records into bridge table for records linked by name and email address

INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME)
Select 
'QUOTES' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
QUOTE_NUM AS SOURCE_KEY1,
'QUOTE_NUM' AS SOURCE_KEY1_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, PRIMARY_EMAIL_ADDRESS ORDER BY MEM_CREATE_DATE DESC, QUOTES_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) C
INNER JOIN 
(SELECT
QUOTE_NUM,
FIRST_NAME,
LAST_NAME, 
PRIMARY_EMAIL_ADDRESS
from CUSTOMERS.MDM_WORK_QUOTES_STG
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND C.PRIMARY_EMAIL_ADDRESS=D.PRIMARY_EMAIL_ADDRESS
AND C.DUP_CHECK=1;

--DELETE IF NO MATCH IN WORK TABLE
DELETE FROM CUSTOMERS.MDM_WORK_QUOTES_STG A
WHERE A.QUOTE_NUM IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='QUOTES');

-- STEP4: previously linked records are deleted
-- STEP4: record count in CUSTOMERS.MDM_WORK_QUOTES_STG is 
select count(0) from CUSTOMERS.MDM_WORK_QUOTES_STG;
-- STEP4: cleaning up records that have been updated to have the same nk
-- STEP4: updating the bridge table 

UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, PRIMARY_EMAIL_ADDRESS ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
PRIMARY_EMAIL_ADDRESS
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NAME, 
LAST_NAME,  
PRIMARY_EMAIL_ADDRESS)
B
ON A.FIRST_NAME=B.FIRST_NAME 
AND A.LAST_NAME=B.LAST_NAME 
AND A.PRIMARY_EMAIL_ADDRESS=B.PRIMARY_EMAIL_ADDRESS
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

-- STEP4: bridge table updated
-- STEP4: deleting records from customer dim that no longer have any matches 

DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);

-- STEP5: Inserting new records into the DIM table

INSERT INTO CUSTOMERS.MDM_CUSTOMER_DIM(
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE)
SELECT 
RECORD_NUMBER + (SELECT MAX(CUSTOMER_MDM_KEY) FROM CUSTOMERS.MDM_CUSTOMER_DIM) AS CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE
FROM 
(
SELECT 
ROW_NUMBER() OVER() RECORD_NUMBER,
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE
FROM
(
SELECT 
FIRST_NAME, 
LAST_NAME, 
SUFFIX NAME_SUFFIX_CD,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
QUOTES_ADDRESS_LINE1,
QUOTES_ADDRESS_LINE2,
QUOTES_CITY,
QUOTES_STATE,
QUOTES_ZIP,
QUOTES_HOME_TELEPHONE_NUM,
QUOTES_BUSINESS_TELEPHONE_NUM,
QUOTES_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, PRIMARY_CITY, PRIMARY_STATE,PRIMARY_ZIP ORDER BY PRIMARY_EMAIL_ADDRESS) AS DUP_CHECK
FROM 
CUSTOMERS.MDM_WORK_QUOTES_STG 
WHERE PRIMARY_ADDRESS_LINE1 IS NOT NULL
) A
WHERE A.DUP_CHECK=1
);
-- STEP5: finished load of QUOTES records into the customer dim
-- STEP5: starting load of new QUOTES records into the customer bridge

INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME)
Select 
'QUOTES' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
QUOTE_NUM AS SOURCE_KEY1,
'QUOTE_NUM' AS SOURCE_KEY1_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP
FROM CUSTOMERS.MDM_CUSTOMER_DIM) C
INNER JOIN 
(SELECT
QUOTE_NUM,
FIRST_NAME, 
LAST_NAME,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP
FROM CUSTOMERS.MDM_WORK_QUOTES_STG
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND C.PRIMARY_ADDRESS_LINE1=D.PRIMARY_ADDRESS_LINE1 
AND C.PRIMARY_CITY=D.PRIMARY_CITY 
AND C.PRIMARY_STATE=D.PRIMARY_STATE
AND C.PRIMARY_ZIP=D.PRIMARY_ZIP;
-- STEP5: finished with load of QUOTES data
