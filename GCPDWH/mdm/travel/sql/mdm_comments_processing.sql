#!/bin/bash
#Overall flow of this script is
#Step0 Prepare the COMMENTS Customer data for the MDM process
#Step1 update dimension records that have already been tied to records in the bridge table
#Step2 Insert records into the bridge table for records that we have a match on the MEMBER_ID
#Step3 Insert records into the bridge table for records that we have a match on the name, and address
#Step4 Insert records into the bridge table for records that we have a match on the name, and email address
#Step5 Insert new records into the dimension table and bridge table for any new members
#MDM Process starts by creating the initial work table that contains all customer data currently in the system with fields standardized for MDM
--STEP0: finished load of CUSTOMERS.MDM_WORK_COMMENTS_STG
--STEP0: record count in CUSTOMERS.MDM_WORK_SAM_STG is `bq query --use_legacy_sql=false "select count(0) from CUSTOMERS.MDM_WORK_COMMENTS_STG"`
####First step is to update records in the mdm_customer_dim that have previously been linked and then delete those records from the working table
--STEP1: starting update of previously linked customers
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NM=CASE WHEN A.FIRST_NM IS NULL THEN B.FIRST_NM ELSE A.FIRST_NM END, 
A.LAST_NM= CASE WHEN A.LAST_NM IS NULL THEN B.LAST_NM ELSE A.LAST_NM END, 
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.EMAIL ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.COMMENTS_PHONE_NUMBER =B.COMMENTS_PHONE_NUMBER, 
A.COMMENTS_ADDRESS_LINE1 =B.COMMENTS_ADDRESS_LINE1, 
A.COMMENTS_ADDRESS_LINE2 =B.COMMENTS_ADDRESS_LINE2,
A.COMMENTS_CITY =B.COMMENTS_CITY,
A.COMMENTS_STATE =B.COMMENTS_STATE, 
A.COMMENTS_ZIP =B.COMMENTS_ZIP ,
A.COMMENTS_CREATE_DATE =B.COMMENTS_CREATE_DATE
FROM (
SELECT 
CUSTOMER_MDM_KEY,
FIRST_NM,
LAST_NM,
ADDRESS_LINE_1,
ADDRESS_LINE_2,
CITY,
STATE,
ZIP,
EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_WORK_COMMENTS_STG C
INNER JOIN CUSTOMERS.MDM_CUSTOMER_BRIDGE D
ON CAST(C.INVOICE_PAY_ID AS STRING)=D.SOURCE_KEY1 AND D.SOURCE_SYSTEM='COMMENTS'
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--STEP1: previously linked customers are updated, removing those customers from the work table
DELETE FROM CUSTOMERS.MDM_WORK_COMMENTS_STG A
WHERE CAST(A.INVOICE_PAY_ID AS STRING)IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='COMMENTS');

--STEP1: previously linked records are deleted
--STEP1: record count in CUSTOMERS.MDM_WORK_COMMENTS_STG is `bq query --use_legacy_sql=false "select count(0) from CUSTOMERS.MDM_WORK_COMMENTS_STG"`
--STEP1: cleaning up records that have been updated to have the same nk
--STEP1: updating the bridge table 
UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM,PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NM, 
LAST_NM, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE)
B
ON A.FIRST_NM=B.FIRST_NM 
AND A.LAST_NM=B.LAST_NM 
AND A.PRIMARY_ADDRESS_LINE1=B.PRIMARY_ADDRESS_LINE1 
AND A.PRIMARY_CITY=B.PRIMARY_CITY 
AND A.PRIMARY_STATE=B.PRIMARY_STATE
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

--STEP1: bridge table updated
--STEP1: deleting records from customer dim that no longer have any matches 
DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);

--STEP1: finished deleting previous duplicates
####Step 2 is to update based on the member id 
--STEP2: starting update of customer dim for records linked on the member id 
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NM=CASE WHEN A.FIRST_NM IS NULL THEN B.FIRST_NM ELSE A.FIRST_NM END, 
A.LAST_NM= CASE WHEN A.LAST_NM IS NULL THEN B.LAST_NM ELSE A.LAST_NM END,  
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.EMAIL ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.COMMENTS_PHONE_NUMBER =B.COMMENTS_PHONE_NUMBER, 
A.COMMENTS_ADDRESS_LINE1 =B.COMMENTS_ADDRESS_LINE1, 
A.COMMENTS_ADDRESS_LINE2 =B.COMMENTS_ADDRESS_LINE2,
A.COMMENTS_CITY =B.COMMENTS_CITY,
A.COMMENTS_STATE =B.COMMENTS_STATE, 
A.COMMENTS_ZIP =B.COMMENTS_ZIP ,
A.COMMENTS_CREATE_DATE =B.COMMENTS_CREATE_DATE
FROM (
SELECT 
CUSTOMER_MDM_KEY,
FIRST_NM,
LAST_NM,
ADDRESS_LINE_1 ,
ADDRESS_LINE_2 ,
CITY,
STATE,
ZIP,
EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE ,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_WORK_COMMENTS_STG C
INNER JOIN 
(SELECT
CUSTOMER_MDM_KEY,
SOURCE_KEY2 AS MEMBERSHIP_ID,
ROW_NUMBER() OVER (PARTITION BY SOURCE_KEY2 ORDER BY CUSTOMER_MDM_KEY DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM = 'COMMENTS'
) D
ON C.MEMBERSHIP_ID=D.MEMBERSHIP_ID
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--STEP2: customers linked by the membership id
--STEP2: inserting records into bridge table for records linked by membership id 
INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME,
SOURCE_KEY2,
SOURCE_KEY2_COLUMN_NAME)
Select 
'COMMENTS' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
CAST(INVOICE_PAY_ID AS STRING) AS SOURCE_KEY1,
'INVOICE_PAY_ID' AS SOURCE_KEY1_COLUMN_NAME,
D.MEMBERSHIP_ID AS SOURCE_KEY2,
'MEMBERSHIP_ID' AS SOURCE_KEY2_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
SOURCE_KEY2 AS MEMBERSHIP_ID,
ROW_NUMBER() OVER (PARTITION BY SOURCE_KEY2 ORDER BY CUSTOMER_MDM_KEY DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM = 'COMMENTS'
) C
INNER JOIN 
(SELECT
INVOICE_PAY_ID,
MEMBERSHIP_ID
from CUSTOMERS.MDM_WORK_COMMENTS_STG
) D
on C.MEMBERSHIP_ID=D.MEMBERSHIP_ID
AND C.DUP_CHECK=1;

DELETE FROM CUSTOMERS.MDM_WORK_COMMENTS_STG A
WHERE CAST(A.INVOICE_PAY_ID AS STRING) IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='COMMENTS');

--STEP2: previously linked records are deleted
--STEP2: record count in CUSTOMERS.MDM_WORK_COMMENTS_STG is `bq query --use_legacy_sql=false "select count(0) from CUSTOMERS.MDM_WORK_COMMENTS_STG"`
--STEP2: cleaning up records that have been updated to have the same nk
--STEP2: updating the bridge table 
UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NM, 
LAST_NM,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE)
B
ON A.FIRST_NM=B.FIRST_NM 
AND A.LAST_NM=B.LAST_NM 
AND CASE WHEN A.PRIMARY_ADDRESS_LINE1 IS NOT NULL 
      THEN A.PRIMARY_ADDRESS_LINE1
      ELSE ''
      END =CASE WHEN B.PRIMARY_ADDRESS_LINE1 IS NOT NULL 
      THEN B.PRIMARY_ADDRESS_LINE1
      ELSE ''
      END
AND CASE WHEN A.PRIMARY_CITY IS NOT NULL 
      THEN A.PRIMARY_CITY
      ELSE ''
      END =CASE WHEN B.PRIMARY_CITY IS NOT NULL 
      THEN B.PRIMARY_CITY
      ELSE ''
      END
AND CASE WHEN A.PRIMARY_STATE IS NOT NULL 
      THEN A.PRIMARY_STATE
      ELSE ''
      END =CASE WHEN B.PRIMARY_STATE IS NOT NULL 
      THEN B.PRIMARY_STATE
      ELSE ''
      END
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

--STEP2: bridge table updated
--STEP2: deleting records from customer dim that no longer have any matches 
DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);

--STEP2: finished deleting previous duplicates
####Step 3 is to update based on the name and address
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NM=CASE WHEN A.FIRST_NM IS NULL THEN B.FIRST_NM ELSE A.FIRST_NM END, 
A.LAST_NM= CASE WHEN A.LAST_NM IS NULL THEN B.LAST_NM ELSE A.LAST_NM END,
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_1 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.EMAIL ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.COMMENTS_PHONE_NUMBER =B.COMMENTS_PHONE_NUMBER, 
A.COMMENTS_ADDRESS_LINE1 =B.COMMENTS_ADDRESS_LINE1, 
A.COMMENTS_ADDRESS_LINE2 =B.COMMENTS_ADDRESS_LINE2,
A.COMMENTS_CITY =B.COMMENTS_CITY,
A.COMMENTS_STATE =B.COMMENTS_STATE, 
A.COMMENTS_ZIP =B.COMMENTS_ZIP ,
A.COMMENTS_CREATE_DATE =B.COMMENTS_CREATE_DATE
FROM (
SELECT 
CUSTOMER_MDM_KEY,
C.FIRST_NM,
C.LAST_NM,
C.ADDRESS_LINE_1,
C.ADDRESS_LINE_2,
C.CITY,
C.STATE,
C.ZIP,
EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE ,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM 
(
SELECT 
FIRST_NM,
LAST_NM,
ADDRESS_LINE_1 ,
ADDRESS_LINE_2 ,
CITY,
STATE,
ZIP,
EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE
FROM
CUSTOMERS.MDM_WORK_COMMENTS_STG) C
INNER JOIN 
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NM,
LAST_NM,
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ,PRIMARY_ZIP ORDER BY MEM_CREATE_DATE DESC, COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) D
ON C.FIRST_NM=D.FIRST_NM
AND C.LAST_NM=D.LAST_NM
AND CASE WHEN C.ADDRESS_LINE_1 IS NOT NULL 
      THEN C.ADDRESS_LINE_1
      ELSE ''
      END =CASE WHEN D.PRIMARY_ADDRESS_LINE1 IS NOT NULL 
      THEN D.PRIMARY_ADDRESS_LINE1
      ELSE ''
      END 
AND CASE WHEN C.CITY IS NOT NULL 
      THEN C.CITY
      ELSE ''
      END =CASE WHEN D.PRIMARY_CITY  IS NOT NULL 
      THEN D.PRIMARY_CITY 
      ELSE ''
      END  
AND CASE WHEN C.STATE IS NOT NULL 
      THEN C.STATE
      ELSE ''
      END =CASE WHEN D.PRIMARY_STATE  IS NOT NULL 
      THEN D.PRIMARY_STATE
      ELSE ''
      END  
AND CASE WHEN C.ZIP IS NOT NULL 
      THEN C.ZIP
      ELSE ''
      END =CASE WHEN D.PRIMARY_ZIP  IS NOT NULL 
      THEN D.PRIMARY_ZIP
      ELSE ''
      END  
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--STEP3: customers linked by the name, and address
--STEP3: inserting records into bridge table for records linked by name, birth_date, and address
INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME,
SOURCE_KEY2,
SOURCE_KEY2_COLUMN_NAME)
Select 
'COMMENTS' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
CAST(INVOICE_PAY_ID AS STRING)AS SOURCE_KEY1,
'INVOICE_PAY_ID' AS SOURCE_KEY1_COLUMN_NAME,
D.MEMBERSHIP_ID AS SOURCE_KEY2,
'MEMBERSHIP_ID' AS SOURCE_KEY2_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NM,
LAST_NM,
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE,PRIMARY_ZIP ORDER BY MEM_CREATE_DATE DESC,COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) C
INNER JOIN 
(SELECT
INVOICE_PAY_ID,
MEMBERSHIP_ID,
FIRST_NM,
LAST_NM, 
ADDRESS_LINE_1,
CITY,
STATE,
ZIP
from CUSTOMERS.MDM_WORK_COMMENTS_STG
) D
ON C.FIRST_NM=D.FIRST_NM
AND C.LAST_NM=D.LAST_NM
AND CASE WHEN C.PRIMARY_ADDRESS_LINE1 IS NOT NULL 
      THEN C.PRIMARY_ADDRESS_LINE1
      ELSE ''
      END =CASE WHEN D.ADDRESS_LINE_1   IS NOT NULL 
      THEN D.ADDRESS_LINE_1 
      ELSE ''
      END  
AND CASE WHEN C.PRIMARY_CITY IS NOT NULL 
      THEN C.PRIMARY_CITY
      ELSE ''
      END =CASE WHEN D.CITY   IS NOT NULL 
      THEN D.CITY
      ELSE ''
      END 
AND  CASE WHEN C.PRIMARY_STATE IS NOT NULL 
      THEN C.PRIMARY_STATE
      ELSE ''
      END =CASE WHEN D.STATE  IS NOT NULL 
      THEN D.STATE
      ELSE ''
      END 
AND  CASE WHEN C.PRIMARY_ZIP IS NOT NULL 
      THEN C.PRIMARY_ZIP
      ELSE ''
      END =CASE WHEN D.ZIP  IS NOT NULL 
      THEN D.ZIP
      ELSE ''
      END 
AND C.DUP_CHECK=1;

DELETE FROM CUSTOMERS.MDM_WORK_COMMENTS_STG A
WHERE CAST(A.INVOICE_PAY_ID AS STRING) IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='COMMENTS');

--STEP3: previously linked records are deleted
--STEP3: record count in CUSTOMERS.MDM_WORK_COMMENTS_STG is `bq query --use_legacy_sql=false "select count(0) from CUSTOMERS.MDM_WORK_COMMENTS_STG"`
--STEP3: cleaning up records that have been updated to have the same nk
--STEP3: updating the bridge table 
UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE,PRIMARY_ZIP ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NM, 
LAST_NM,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP)
B
ON A.FIRST_NM=B.FIRST_NM 
AND A.LAST_NM=B.LAST_NM 
AND CASE WHEN A.PRIMARY_ADDRESS_LINE1 IS NOT NULL 
      THEN A.PRIMARY_ADDRESS_LINE1
      ELSE ''
      END =CASE WHEN B.PRIMARY_ADDRESS_LINE1 IS NOT NULL 
      THEN B.PRIMARY_ADDRESS_LINE1
      ELSE ''
      END
AND CASE WHEN A.PRIMARY_CITY IS NOT NULL 
      THEN A.PRIMARY_CITY
      ELSE ''
      END =CASE WHEN B.PRIMARY_CITY IS NOT NULL 
      THEN B.PRIMARY_CITY
      ELSE ''
      END
AND CASE WHEN A.PRIMARY_STATE IS NOT NULL 
      THEN A.PRIMARY_STATE
      ELSE ''
      END =CASE WHEN B.PRIMARY_STATE IS NOT NULL 
      THEN B.PRIMARY_STATE
      ELSE ''
      END
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

--STEP3: bridge table updated
--STEP3: deleting records from customer dim that no longer have any matches 
DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);

####Step4 is to update based on the name, and email address
--STEP4: starting update of customer dim for records linked on the name and email address starting update of customer dim for records linked on the name, birth date, and email address
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NM=CASE WHEN A.FIRST_NM IS NULL THEN B.FIRST_NM ELSE A.FIRST_NM END, 
A.LAST_NM= CASE WHEN A.LAST_NM IS NULL THEN B.LAST_NM ELSE A.LAST_NM END,
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ADDRESS_LINE_2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.EMAIL ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.COMMENTS_PHONE_NUMBER =B.COMMENTS_PHONE_NUMBER, 
A.COMMENTS_ADDRESS_LINE1 =B.COMMENTS_ADDRESS_LINE1, 
A.COMMENTS_ADDRESS_LINE2 =B.COMMENTS_ADDRESS_LINE2,
A.COMMENTS_CITY =B.COMMENTS_CITY,
A.COMMENTS_STATE =B.COMMENTS_STATE, 
A.COMMENTS_ZIP =B.COMMENTS_ZIP ,
A.COMMENTS_CREATE_DATE =B.COMMENTS_CREATE_DATE
from
(
SELECT
CUSTOMER_MDM_KEY,
C.FIRST_NM,
C.LAST_NM,
ADDRESS_LINE_1,
ADDRESS_LINE_2,
CITY,
STATE,
ZIP,
C.EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_WORK_COMMENTS_STG C
INNER JOIN 
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NM,
LAST_NM,
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, PRIMARY_EMAIL_ADDRESS ORDER BY MEM_CREATE_DATE DESC, COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) D
ON C.FIRST_NM=D.FIRST_NM
AND C.LAST_NM=D.LAST_NM
AND C.EMAIL=D.PRIMARY_EMAIL_ADDRESS
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--STEP4: customers linked by the name and email address
--STEP4: inserting records into bridge table for records linked by name and email address
INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME,
SOURCE_KEY2,
SOURCE_KEY2_COLUMN_NAME)
Select 
'COMMENTS' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
CAST(INVOICE_PAY_ID AS STRING) AS SOURCE_KEY1,
'INVOICE_PAY_ID' AS SOURCE_KEY1_COLUMN_NAME,
D.MEMBERSHIP_ID AS SOURCE_KEY2,
'MEMBERSHIP_ID' AS SOURCE_KEY2_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NM,
LAST_NM,
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, PRIMARY_EMAIL_ADDRESS ORDER BY MEM_CREATE_DATE DESC, COMMENTS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) C
INNER JOIN 
(SELECT
INVOICE_PAY_ID,
MEMBERSHIP_ID,
FIRST_NM,
LAST_NM, 
EMAIL
from CUSTOMERS.MDM_WORK_COMMENTS_STG
) D
ON C.FIRST_NM=D.FIRST_NM
AND C.LAST_NM=D.LAST_NM
AND C.PRIMARY_EMAIL_ADDRESS=D.EMAIL
AND C.DUP_CHECK=1;

DELETE FROM CUSTOMERS.MDM_WORK_COMMENTS_STG A
WHERE CAST(A.INVOICE_PAY_ID AS STRING) IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='COMMENTS');

--STEP4: previously linked records are deleted
--STEP4: record count in CUSTOMERS.MDM_WORK_COMMENTS_STG is `bq query --use_legacy_sql=false "select count(0) from CUSTOMERS.MDM_WORK_COMMENTS_STG"`
--STEP4: cleaning up records that have been updated to have the same nk
--STEP4: updating the bridge table 
UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM, 
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, PRIMARY_EMAIL_ADDRESS ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM, 
PRIMARY_EMAIL_ADDRESS
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NM, 
LAST_NM,  
PRIMARY_EMAIL_ADDRESS)
B
ON A.FIRST_NM=B.FIRST_NM 
AND A.LAST_NM=B.LAST_NM 
AND A.PRIMARY_EMAIL_ADDRESS=B.PRIMARY_EMAIL_ADDRESS
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

--STEP4: bridge table updated
--STEP4: deleting records from customer dim that no longer have any matches 
DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);

####Final step is to insert the records that have not yet been matched
--STEP5: Inserting new records into the DIM table
INSERT INTO CUSTOMERS.MDM_CUSTOMER_DIM(
CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE)
SELECT 
RECORD_NUMBER + (SELECT MAX(CUSTOMER_MDM_KEY) FROM CUSTOMERS.MDM_CUSTOMER_DIM) AS CUSTOMER_MDM_KEY,
FIRST_NM, 
LAST_NM, 
ADDRESS_LINE_1, 
ADDRESS_LINE_2, 
CITY, 
STATE,
ZIP,
EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE
FROM 
(
SELECT 
ROW_NUMBER() OVER() RECORD_NUMBER,
FIRST_NM, 
LAST_NM, 
ADDRESS_LINE_1, 
ADDRESS_LINE_2, 
CITY, 
STATE,
ZIP,
EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE
FROM
(
SELECT 
FIRST_NM, 
LAST_NM, 
ADDRESS_LINE_1,
ADDRESS_LINE_2,
CITY,
STATE,
ZIP,
EMAIL,
COMMENTS_PHONE_NUMBER ,
COMMENTS_ADDRESS_LINE1 ,
COMMENTS_ADDRESS_LINE2 ,
COMMENTS_CITY ,
COMMENTS_STATE ,
COMMENTS_ZIP ,
COMMENTS_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NM, LAST_NM, MEMBERSHIP_ID, CITY, STATE,ZIP ORDER BY EMAIL) AS DUP_CHECK
FROM 
CUSTOMERS.MDM_WORK_COMMENTS_STG 
WHERE ADDRESS_LINE_1 IS NOT NULL
) A
WHERE A.DUP_CHECK=1
);

#
#STEP5: finished load of COMMENTS records into the customer dim
#STEP5: starting load of new COMMENTS records into the customer bridge
#
INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME,
SOURCE_KEY2,
SOURCE_KEY2_COLUMN_NAME)
Select 
'COMMENTS' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
CAST(INVOICE_PAY_ID AS STRING) AS SOURCE_KEY1,
'INVOICE_PAY_ID' AS SOURCE_KEY1_COLUMN_NAME,
D.MEMBERSHIP_ID AS SOURCE_KEY2,
'MEMBERSHIP_ID' AS SOURCE_KEY2_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NM,
LAST_NM,
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP
FROM CUSTOMERS.MDM_CUSTOMER_DIM) C
INNER JOIN 
(SELECT
INVOICE_PAY_ID,
MEMBERSHIP_ID,
FIRST_NM, 
LAST_NM,  
ADDRESS_LINE_1, 
CITY, 
STATE,
ZIP
from CUSTOMERS.MDM_WORK_COMMENTS_STG
) D
on C.FIRST_NM=D.FIRST_NM
AND C.LAST_NM=D.LAST_NM
AND CASE WHEN C.PRIMARY_ADDRESS_LINE1 IS NOT NULL 
      THEN C.PRIMARY_ADDRESS_LINE1
      ELSE ''
      END =CASE WHEN D.ADDRESS_LINE_1   IS NOT NULL 
      THEN D.ADDRESS_LINE_1 
      ELSE ''
      END  
AND CASE WHEN C.PRIMARY_CITY IS NOT NULL 
      THEN C.PRIMARY_CITY
      ELSE ''
      END =CASE WHEN D.CITY   IS NOT NULL 
      THEN D.CITY
      ELSE ''
      END 
AND  CASE WHEN C.PRIMARY_STATE IS NOT NULL 
      THEN C.PRIMARY_STATE
      ELSE ''
      END =CASE WHEN D.STATE  IS NOT NULL 
      THEN D.STATE
      ELSE ''
      END 
AND  CASE WHEN C.PRIMARY_ZIP IS NOT NULL 
      THEN C.PRIMARY_ZIP
      ELSE ''
      END =CASE WHEN D.ZIP  IS NOT NULL 
      THEN D.ZIP
      ELSE ''
      END;
#STEP5: finished with load of COMMENTS data