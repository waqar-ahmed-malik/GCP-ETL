----------------------------------------------------------------------
--Overall flow of these script is
--Step1     Prepare the SAM Customer data for the MDM process
--Step2     Update the MERGE_FLAG column using the MERGE_CHECK1_CTL and MERGE_CHECK2_CTL.
--Step2.1   If MERGE_CHECK1_CTL=0 and MERGE_CHECK2_CTL=0 Then Dont Consider those records for MDM Process. All Required Column are having Null Values.
--Step2.2   If MERGE_CHECK1_CTL=1 and MERGE_CHECK2_CTL=1 Then treat that records as Golden record specific to Source System. Adress and Email Id are Unique. It is not merged to any transaction in given source system data.
--Step2.3.0 If MERGE_CHECK1_CTL+MERGE_CHECK2_CTL>=2 Then Identify the Golden and Merge Records from data set. 
--Step2.3.1 To Take the Latest transaction and It is based on Source record creation date and Source record Id (Example: Customer_ID). 
--Step2.3.2 Identify the First record in the Group as "Golden" and the remaining transaction in that group as "Merge".
--Step2.4   If MERGE_CHECK1_CTL=1 and MERGE_CHECK2_CTL=0 Then consider all these transaction as "Golden". It is due to the transaction are unique and not merged with any other records in that group. The Primary Email Address is Null for all these transactions.
--Step2.5   If MERGE_CHECK1_CTL=0 and MERGE_CHECK2_CTL=1 Then consider all these transaction as "Golden". It is due to the transaction are unique and not merged with any other records in that group. The Primary Address Line1 is Null for all these transactions. 
--Step2.6   Delete the records which are not required for MDM Process.[It Could be Source Data Issue and they are not providing all required information for MDM process or Report these transaction as an Issue]
----------------------------------------------------------------------
--STEP1
----------------------------------------------------------------------

CREATE OR REPLACE TABLE LANDING.WORK_MDM_TRAVEL AS
SELECT DISTINCT
  CAST(SOURCE_TRANSACTION_ID AS STRING) AS SOURCE_KEY1,
  CAST(TRIP_TRANSACTION_NUM AS STRING) AS SOURCE_KEY2,
  CAST(NULL AS STRING) AS SOURCE_KEY3,
  CAST('SOURCE_TRANSACTION_ID' AS STRING) AS SOURCE_KEY1_DESC,
  CAST('TRIP_TRANSACTION_NUM' AS STRING) AS SOURCE_KEY2_DESC,
  CAST(NULL AS STRING) AS SOURCE_KEY3_DESC,
  SOURCE_SYSTEM_CD,
  TRAVELER_FIRST_NM AS FIRST_NM,
  TRAVELER_LAST_NM AS LAST_NM,
  CAST(NULL AS STRING) AS MIDDLE_NM,
  CAST(NULL AS STRING) AS PREFFERRED_NM,
  CAST(NULL AS STRING) AS NAME_SUFFIX_CD,
  CAST(NULL AS STRING) AS SALUTATION_CD,
  CAST(NULL AS DATE) AS BIRTH_DT,
  CAST(NULL AS STRING) AS GENDER_CD,
  CAST(NULL AS STRING) AS MARITAL_STATUS,
  CAST(NULL AS STRING) AS DECEASED_IND,
  PRIMARY_ADDRESS_LINE1,
  PRIMARY_ADDRESS_LINE2,
  PRIMARY_CITY,
  PRIMARY_STATE,
  PRIMARY_ZIP,
  PRIMARY_EMAIL_ADDRESS,
  PRIMARY_PHONE_NUM AS PRIMARY_PHONE_NUM,
  PRIMARY_ADDRESS_LINE1 AS RESIDENTIAL_ADDRESS_LINE1,
  PRIMARY_ADDRESS_LINE2 AS RESIDENTIAL_ADDRESS_LINE2,
  PRIMARY_CITY AS RESIDENTIAL_CITY,
  PRIMARY_STATE AS RESIDENTIAL_STATE,
  PRIMARY_ZIP AS RESIDENTIAL_ZIP,
  PRIMARY_PHONE_NUM AS HOME_TELEPHONE_NUM,
  CREATE_DT AS SOURCE_CREATE_DATE,
  COUNT(CASE
      WHEN (TRIM(PRIMARY_ADDRESS_LINE1) IS NULL OR TRIM(PRIMARY_ADDRESS_LINE1)='') THEN NULL
      ELSE 1 END) OVER(PARTITION BY UPPER(TRAVELER_FIRST_NM),
    UPPER(TRAVELER_LAST_NM),
    UPPER(PRIMARY_ADDRESS_LINE1),
    UPPER(PRIMARY_ADDRESS_LINE2),
    UPPER(PRIMARY_CITY),
    UPPER(PRIMARY_STATE),
    UPPER(PRIMARY_ZIP)) AS MERGE_CHECK1_CTL,
  COUNT(CASE
      WHEN (TRIM(PRIMARY_EMAIL_ADDRESS) IS NULL OR TRIM(PRIMARY_EMAIL_ADDRESS)='') THEN NULL
      ELSE 1 END) OVER(PARTITION BY UPPER(TRAVELER_FIRST_NM),
    UPPER(TRAVELER_LAST_NM),
    UPPER(PRIMARY_EMAIL_ADDRESS)) AS MERGE_CHECK2_CTL,
  '      ' AS MERGE_FLAG,
  CAST(NULL AS STRING) as ADDRESS_MATCH_SOURCE_KEY,
	CAST(NULL AS INT64) AS CUSTOMER_MDM_KEY,
	CAST(NULL AS STRING) AS WORK_MATCH_GROUP,
	CAST(NULL AS STRING) AS MDM_MATCH_GROUP,
	CAST(NULL AS BYTES) AS HOME_MD5_KEY,
	CAST(NULL AS BYTES) AS MAILING_MD5_KEY,
	CAST(NULL AS BYTES) AS OTHER_MD5_KEY,
	CAST(NULL AS STRING) AS EMAIL_MATCH_SOURCE_KEY,
	CAST(NULL AS STRING) AS ADDRESS_MATCH_DESC,
	CAST(NULL AS STRING) AS EMAIL_MATCH_DESC,
	CAST(NULL AS STRING) AS GOLDEN_MATCH_KEY,
	REGEXP_REPLACE(CONCAT( IFNULL(UPPER(TRIM(PRIMARY_ADDRESS_LINE1)),''),
                          IFNULL(UPPER(TRIM(PRIMARY_ADDRESS_LINE2)),''), 
						  IFNULL(UPPER(TRIM(PRIMARY_CITY)),''), 
						  IFNULL(UPPER(TRIM(PRIMARY_STATE)),''), 
						  IFNULL(UPPER(TRIM(PRIMARY_ZIP)),'')),
				  '[^a-zA-Z0-9]','') AS ADDRESS_MATCH_KEY1,
  CAST(NULL AS STRING) AS ADDRESS_MATCH_KEY2
  FROM  (SELECT
  SOURCE_TRANSACTION_ID,
  CAST(TRIP_TRANSACTION_NUM AS STRING) AS TRIP_TRANSACTION_NUM,
  'TRAVEL_TST' AS SOURCE_SYSTEM_CD,
  UPPER(TRIM(TRAVELER_FIRST_NM)) AS TRAVELER_FIRST_NM,
  UPPER(TRIM(TRAVELER_LAST_NM)) AS TRAVELER_LAST_NM,
  UPPER(TRIM(TRAVELER_ADDRESS_LINE_1)) AS PRIMARY_ADDRESS_LINE1,
  UPPER(TRIM(TRAVELER_ADDRESS_LINE_2)) AS PRIMARY_ADDRESS_LINE2,
  UPPER(TRIM(TRAVELER_CITY)) AS PRIMARY_CITY,
  UPPER(TRIM(TRAVELER_STATE)) AS PRIMARY_STATE,
   CASE WHEN TRAVELER_ZIP_CD='' THEN NULL 
    WHEN LENGTH(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
  END AS PRIMARY_ZIP,
      CASE WHEN TRAVELER_PHONE_NUM='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,10)
END END AS PRIMARY_PHONE_NUM ,
  UPPER(TRIM(TRAVELER_EMAIL_ADDRESS)) AS PRIMARY_EMAIL_ADDRESS,
    PARSE_DATE('%Y-%m-%d',SUBSTR(CAST(CREATE_DTTIME AS STRING),1,10)) AS CREATE_DT
FROM
  LANDING.WORK_TRAVEL_TST_TRANSACTIONS
 union all
SELECT
  SOURCE_TRANSACTION_ID,
  CAST(TRIP_TRANSACTION_NUM AS STRING) AS TRIP_TRANSACTION_NUM,
  'TRAVEL_GLOBALWARE' AS SOURCE_SYSTEM_CD,
  UPPER(TRIM(TRAVELER_FIRST_NAME)) AS TRAVELER_FIRST_NM,
  UPPER(TRIM(TRAVELER_LAST_NAME)) AS TRAVELER_LAST_NM,
  UPPER(TRIM(TRAVELER_ADDRESS_LINE_1)) AS PRIMARY_ADDRESS_LINE1,
  UPPER(TRIM(TRAVELER_ADDRESS_LINE_2)) AS PRIMARY_ADDRESS_LINE2,
  UPPER(TRIM(TRAVELER_CITY)) AS PRIMARY_CITY,
  UPPER(TRIM(TRAVELER_STATE)) AS PRIMARY_STATE,
   CASE WHEN TRAVELER_ZIP_CD='' THEN NULL 
    WHEN LENGTH(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]','')
    WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
    THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
  ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(TRAVELER_ZIP_CD,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
  END AS PRIMARY_ZIP,
      CASE WHEN TRAVELER_PHONE_NUM='' THEN NULL ELSE   CASE
    WHEN LENGTH(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]','')) <= 10 THEN REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]','')
    WHEN SUBSTR(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,1) = '1' THEN SUBSTR(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]',''),2,11)
  ELSE
  SUBSTR(REGEXP_REPLACE(TRAVELER_PHONE_NUM,'[^a-zA-Z0-9]',''),1,10)
END END AS PRIMARY_PHONE_NUM ,
  UPPER(TRIM(TRAVELER_EMAIL_ADDRESS)) AS PRIMARY_EMAIL_ADDRESS,
  PARSE_DATE('%Y-%m-%d',SUBSTR(CAST(CREATE_DTTIME AS STRING),1,10)) AS CREATE_DT
FROM
  LANDING.WORK_TRAVEL_GLOBALWARE_TRANSACTIONS);
	     
----------------------------------------------------------------------
--STEP 1.2
---------------------------------------------------------------------- 

INSERT INTO
  LANDING.MDM_CUSTOMER_EXCEPTIONS ( SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
    MIDDLE_NM,
    PREFFERRED_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    DECEASED_IND,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
	PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    BILLING_ADDRESS_LINE1,
    BILLING_ADDRESS_LINE2,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
    OTHER_ADDRESS_LINE1,
    OTHER_ADDRESS_LINE2,
    OTHER_CITY,
    OTHER_STATE,
    OTHER_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CREATE_DTTIME
    )
SELECT
    SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
    MIDDLE_NM,
    PREFFERRED_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    DECEASED_IND,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
	PRIMARY_PHONE_NUM,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    NULL AS BILLING_ADDRESS_LINE1,
    NULL AS BILLING_ADDRESS_LINE2,
    NULL AS BILLING_CITY,
    NULL AS BILLING_STATE,
    NULL AS BILLING_ZIP,
    NULL AS OTHER_ADDRESS_LINE1,
    NULL AS OTHER_ADDRESS_LINE2,
    NULL AS OTHER_CITY,
    NULL AS OTHER_STATE,
    NULL AS OTHER_ZIP,
    NULL AS OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    NULL AS WORK_PHONE_NUM,
    NULL AS OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CURRENT_DATETIME() AS CREATE_DTTIME
FROM
  LANDING.WORK_MDM_TRAVEL
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR PRIMARY_ADDRESS_LINE1 IS NULL
  OR TRIM(PRIMARY_ADDRESS_LINE1)='';
----------------------------------------------------------------------
--STEP 1.3
----------------------------------------------------------------------  
DELETE
FROM
  LANDING.WORK_MDM_TRAVEL
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL
  OR PRIMARY_ADDRESS_LINE1 IS NULL
  OR TRIM(PRIMARY_ADDRESS_LINE1)='';

----------------------------------------------------------------------
--STEP2.1
----------------------------------------------------------------------
update  LANDING.WORK_MDM_TRAVEL set MERGE_FLAG='Ignore'
where MERGE_FLAG ='      ' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)=0
and not (HOME_TELEPHONE_NUM is not null);
----------------------------------------------------------------------
--STEP2.2
----------------------------------------------------------------------
update  LANDING.WORK_MDM_TRAVEL set MERGE_FLAG='Golden',GOLDEN_MATCH_KEY=SOURCE_KEY1
where MERGE_FLAG ='      ' 
AND MERGE_CHECK2_CTL in (0,1) and MERGE_CHECK1_CTL in (0,1);

----------------------------------------------------------------------
--STEP2.3 -- This Update statement to identify the group where FIRST_NAME,LAST_NAME and BIRTH_DT are same.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_TRAVEL D
SET D.WORK_MATCH_GROUP=C.MATCH_SOURCE_KEY
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) MATCH_SOURCE_KEY
from LANDING.WORK_MDM_TRAVEL where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      ';
----------------------------------------------------------------------
--STEP2.4 -- Below Updates statement to identify the groups where FIRST_NAME,LAST_NAME, BIRTH_DT and ADDRESS are same from STEP2.3.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_TRAVEL D
SET D.ADDRESS_MATCH_SOURCE_KEY=C.ADDRESS_MATCH_SOURCE_KEY,D.ADDRESS_MATCH_DESC='Merge' -- ADDRESS_MATCH
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY WORK_MATCH_GROUP,UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) ADDRESS_MATCH_SOURCE_KEY
from LANDING.WORK_MDM_TRAVEL where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2
) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      ';
-----------
update  LANDING.WORK_MDM_TRAVEL A set A.ADDRESS_MATCH_DESC ='Golden' -- ADDRESS_MATCH Golden Record
where exists (select 1 from 
(select SOURCE_KEY1,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) AS ROW_NUM  from LANDING.WORK_MDM_TRAVEL where 
MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY1=A.SOURCE_KEY1 and ROW_NUM=1)
and MERGE_FLAG ='      ';

update LANDING.WORK_MDM_TRAVEL SET EMAIL_MATCH_SOURCE_KEY=ADDRESS_MATCH_SOURCE_KEY, EMAIL_MATCH_DESC=ADDRESS_MATCH_DESC
where MERGE_FLAG ='      ' and MERGE_CHECK2_CTL=0 and MERGE_CHECK1_CTL>=2
and PRIMARY_EMAIL_ADDRESS is null;
 
----------------------------------------------------------------------
--STEP2.5 -- Below Updates statement to identify the groups where FIRST_NAME,LAST_NAME, BIRTH_DT and EMAIL are same from STEP2.3.
----------------------------------------------------------------------
UPDATE LANDING.WORK_MDM_TRAVEL D
SET D.EMAIL_MATCH_SOURCE_KEY=C.EMAIL_MATCH_SOURCE_KEY,D.EMAIL_MATCH_DESC='Merge' -- EMAIL MATCH
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY WORK_MATCH_GROUP,UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_EMAIL_ADDRESS)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) EMAIL_MATCH_SOURCE_KEY
from LANDING.WORK_MDM_TRAVEL where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2
) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      '
and PRIMARY_EMAIL_ADDRESS is not null;

---------------

update  LANDING.WORK_MDM_TRAVEL A set A.EMAIL_MATCH_DESC ='Golden' -- EMAIL_MATCH Golden Record
where exists (select 1 from 
(select SOURCE_KEY1,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT,UPPER(PRIMARY_EMAIL_ADDRESS)
ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) AS ROW_NUM  from LANDING.WORK_MDM_TRAVEL where 
MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY1=A.SOURCE_KEY1 and ROW_NUM=1)
and MERGE_FLAG ='      '
and PRIMARY_EMAIL_ADDRESS is not null;

----------------------------------------------------------------------
--STEP2.5 -- Below Updates statement to identify the Golden Match Key Based on Address and Email Match Keys Values.
----------------------------------------------------------------------

update  LANDING.WORK_MDM_TRAVEL A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_TRAVEL where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden','Merge')
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';
---------------
update  LANDING.WORK_MDM_TRAVEL A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select M.SOURCE_KEY1,G.GOLDEN_MATCH_KEY from
(select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_TRAVEL where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden','Merge') and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) G,
(select SOURCE_KEY1,ADDRESS_MATCH_SOURCE_KEY,EMAIL_MATCH_SOURCE_KEY as GOLDEN_MATCH_KEY from LANDING.WORK_MDM_TRAVEL where ADDRESS_MATCH_DESC ='Merge' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) M
WHERE G.ADDRESS_MATCH_SOURCE_KEY=M.ADDRESS_MATCH_SOURCE_KEY
) B
where A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';

----------------------------------------------------------------------
--STEP2.6 -- Below Updates statement to identify the Golden and Merge Records Based on Golden Match Key Values.
----------------------------------------------------------------------


update  LANDING.WORK_MDM_TRAVEL A 
SET A.MERGE_FLAG='Golden'
Where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden')
and A.MERGE_FLAG ='      ';


update  LANDING.WORK_MDM_TRAVEL A 
SET A.MERGE_FLAG='Merge'
FROM (select M.SOURCE_KEY1,G.GOLDEN_MATCH_KEY from
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_TRAVEL where ADDRESS_MATCH_DESC ='Golden' and EMAIL_MATCH_DESC  in ('Golden')) G,
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_TRAVEL where WORK_MATCH_GROUP<>'Golden'  ) M
WHERE G.GOLDEN_MATCH_KEY=M.GOLDEN_MATCH_KEY) B
WHERE A.SOURCE_KEY1=B.SOURCE_KEY1
and A.MERGE_FLAG ='      ';

update LANDING.WORK_MDM_TRAVEL A  
SET A.MERGE_FLAG='Merge' , A.GOLDEN_MATCH_KEY=A.WORK_MATCH_GROUP
where MERGE_FLAG ='      ';

----------------------------------------------------------------------
--STEP2.7 -- DOB Merge , If Incase any DOB is null
----------------------------------------------------------------------
update  LANDING.WORK_MDM_TRAVEL A 
SET A.MERGE_FLAG='DOB_Merge',A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (
select C.SOURCE_KEY1 as SOURCE_KEY1,D.SOURCE_KEY1 as GOLDEN_MATCH_KEY FROM
(select * from LANDING.WORK_MDM_TRAVEL where BIRTH_DT IS NULL and MERGE_FLAG='Golden' )C
INNER JOIN (select *,
ROW_NUMBER() OVER(PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),
    UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP) ORDER BY SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) as ROW_NUM
    FROM LANDING.WORK_MDM_TRAVEL where MERGE_FLAG='Golden' and BIRTH_DT IS NOT NULL ) D
ON COALESCE(C.FIRST_NM,'~')=COALESCE(D.FIRST_NM,'~')
AND COALESCE(C.LAST_NM,'~')=COALESCE(D.LAST_NM,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE1,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE1,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE2,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE2,'~') 
AND COALESCE(C.PRIMARY_CITY,'~')=COALESCE(D.PRIMARY_CITY,'~') 
AND COALESCE(C.PRIMARY_STATE,'~')=COALESCE(D.PRIMARY_STATE,'~')
AND COALESCE(C.PRIMARY_ZIP,'~')=COALESCE(D.PRIMARY_ZIP,'~')
and D.ROW_NUM=1) B
where A.SOURCE_KEY1=B.SOURCE_KEY1;
----------------------------------------------------------------------
--STEP2.8 DOB Merge
----------------------------------------------------------------------
update  LANDING.WORK_MDM_TRAVEL A 
SET A.GOLDEN_MATCH_KEY=B.GOLDEN_MATCH_KEY
FROM (select DOB.GOLDEN_MATCH_KEY AS GOLDEN_MATCH_KEY,
M.SOURCE_KEY1 as SOURCE_KEY1 FROM
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_TRAVEL  
where MERGE_FLAG='DOB_Merge') DOB,
(select SOURCE_KEY1,GOLDEN_MATCH_KEY from LANDING.WORK_MDM_TRAVEL 
where MERGE_FLAG='Merge') M
where DOB.SOURCE_KEY1=M.GOLDEN_MATCH_KEY) B
where A.MERGE_FLAG='Merge'
AND A.SOURCE_KEY1=B.SOURCE_KEY1;
----------------------------------------------------------------------
--STEP2.9 DOB Merge
----------------------------------------------------------------------
update LANDING.WORK_MDM_TRAVEL SET MERGE_FLAG='Merge'
where MERGE_FLAG='DOB_Merge'
