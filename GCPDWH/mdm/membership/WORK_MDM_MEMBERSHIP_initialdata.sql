----------------------------------------------------------------------
--Overall flow of these script is

--Step1     Prepare the SAM Customer data for the MDM process
--Step2     Update the MERGE_FLAG column using the MERGE_CHECK1_CTL and MERGE_CHECK2_CTL.
--Step2.1   If MERGE_CHECK1_CTL=0 and MERGE_CHECK2_CTL=0 Then Dont Consider those records for MDM Process. All Required Column are having Null Values.
--Step2.2   If MERGE_CHECK1_CTL=1 and MERGE_CHECK2_CTL=1 Then treat that records as Golden record specific to Source System. Adress and Email Id are Unique. It is not merged to any transaction in given source system data.
--Step2.3.0 If MERGE_CHECK1_CTL+MERGE_CHECK2_CTL>=2 Then Identify the Golden and Merge Records from data set. 
--Step2.3.1 To Take the Latest transaction and It is based on Source record creation date and Source record Id (Example: Customer_ID). 
--Step2.3.2 Identify the First record in the Group as "Golden" and the remaining transaction in that group as "Merge".
--Step2.4   If MERGE_CHECK1_CTL=1 and MERGE_CHECK2_CTL=0 Then consider all these transaction as "Golden". It is due to the transaction are unique and not merged with any other records in that group. The Primary Email Address is Null for all these transactions.
--Step2.5   If MERGE_CHECK1_CTL=0 and MERGE_CHECK2_CTL=1 Then consider all these transaction as "Golden". It is due to the transaction are unique and not merged with any other records in that group. The Primary Address Line1 is Null for all these transactions. 
--Step2.6   Delete the records which are not required for MDM Process.[It Could be Source Data Issue and they are not providing all required information for MDM process or Report these transaction as an Issue]

----------------------------------------------------------------------
--STEP1
----------------------------------------------------------------------
--CREATE OR REPLACE TABLE
--LANDING.WORK_MDM_MEMBERSHIP AS
--SELECT
--CAST(SOURCE_KEY1 AS STRING) AS SOURCE_KEY1,
--CAST(SOURCE_KEY2 AS STRING) AS SOURCE_KEY2,
--CAST(SOURCE_KEY3 AS STRING) AS SOURCE_KEY3,
--SOURCE_KEY1_DESC,
--SOURCE_KEY2_DESC,
--SOURCE_KEY3_DESC,
--SOURCE_SYSTEM_CD,
--FIRST_NM,
--LAST_NM,
--MIDDLE_NM,
--PREFFERRED_NM,
--DECEASED_IND,
--NAME_SUFFIX_CD,
--SALUTATION_CD,
--BIRTH_DT,
--GENDER_CD,
--MARITAL_STATUS,
--PRIMARY_ADDRESS_LINE1,
--PRIMARY_ADDRESS_LINE2,
--PRIMARY_CITY,
--PRIMARY_STATE,
--CASE
--  WHEN LENGTH(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]','')
--  WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
--  THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
--ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(PRIMARY_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
--END AS PRIMARY_ZIP,
--PRIMARY_EMAIL_ADDRESS,
--RESIDENTIAL_ADDRESS_LINE1,
--RESIDENTIAL_ADDRESS_LINE2,
--RESIDENTIAL_CITY,
--RESIDENTIAL_STATE,
--CASE
--  WHEN LENGTH(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]','')
--  WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
--  THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
--ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(RESIDENTIAL_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
--END AS RESIDENTIAL_ZIP,
--BILLING_ADDRESS_LINE1,
--BILLING_ADDRESS_LINE2,
--BILLING_CITY,
--BILLING_STATE,
--CASE
--  WHEN LENGTH(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]','')
--  WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
--  THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
--ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(BILLING_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
--END AS BILLING_ZIP,
--OTHER_ADDRESS_LINE1,
--OTHER_ADDRESS_LINE2,
--OTHER_CITY,
--OTHER_STATE,
--CASE
--  WHEN LENGTH(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]','')) = 6 THEN REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]','')
--  WHEN LENGTH(REGEXP_REPLACE(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]','')) < 5 
--  THEN LPAD(REGEXP_REPLACE(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),5,'0')
--ELSE SUBSTR(REGEXP_REPLACE(REGEXP_REPLACE(OTHER_ZIP,'[^a-zA-Z0-9]',''),'[^0-9]',''),0,5)
--END AS OTHER_ZIP,
--OTHER_EMAIL_ADDRESS,
--PRIMARY_PHONE_NUM,
--HOME_TELEPHONE_NUM,
--WORK_PHONE_NUM,
--OTHER_PHONE_NUM,
--SOURCE_CREATE_DATE,
--COUNT(CASE
--    WHEN (TRIM(PRIMARY_ADDRESS_LINE1) IS NULL OR TRIM(PRIMARY_ADDRESS_LINE1)='') THEN NULL
--    ELSE 1 END) OVER(PARTITION BY UPPER(FIRST_NM),
--  UPPER(LAST_NM),
--  BIRTH_DT,
--  UPPER(PRIMARY_ADDRESS_LINE1),
--  UPPER(PRIMARY_ADDRESS_LINE2),
--  UPPER(PRIMARY_CITY),
--  UPPER(PRIMARY_STATE),
--  UPPER(PRIMARY_ZIP)) AS MERGE_CHECK1_CTL,
--COUNT(CASE
--    WHEN (TRIM(PRIMARY_EMAIL_ADDRESS) IS NULL OR TRIM(PRIMARY_EMAIL_ADDRESS)='') THEN NULL
--    ELSE 1 END) OVER(PARTITION BY UPPER(FIRST_NM),
--  UPPER(LAST_NM),
--  BIRTH_DT,
--  UPPER(PRIMARY_EMAIL_ADDRESS)) AS MERGE_CHECK2_CTL,
--'      ' AS MERGE_FLAG,
--CAST(SOURCE_KEY1 AS STRING) AS FIRST_VALUE_MATCH_GROUP,
--TERM_EXPIRATION_DT,
--CAST(NULL AS INT64) AS CUSTOMER_MDM_KEY, 
--CAST(NULL AS STRING) AS MATCH_KEY, 
--CAST(NULL AS BYTES) AS HOME_MD5_KEY, 
--CAST(NULL AS BYTES) AS MAILING_MD5_KEY, 
--CAST(NULL AS BYTES) AS OTHER_MD5_KEY
--FROM (
--SELECT
--  MEMBER_NUM AS SOURCE_KEY1,
--  MEMBERSHIP_ID AS SOURCE_KEY2,
--  ASSOC_CODE AS SOURCE_KEY3,
--  'MEMBER_NUM' AS SOURCE_KEY1_DESC,
--  'MEMBERSHIP_ID' AS SOURCE_KEY2_DESC,
--  'ASSOC_CODE' AS SOURCE_KEY3_DESC,
--  'MEMBERSHIP' AS SOURCE_SYSTEM_CD,
--  UPPER(FIRST_NM) AS FIRST_NM,
--  UPPER(LAST_NM) AS LAST_NM,
--	 CAST(NULL AS STRING) AS MIDDLE_NM,
--	 CAST(NULL AS STRING) AS PREFFERRED_NM,
--  CAST(NULL AS STRING) AS DECEASED_IND,
--  NAME_SUFFIX_CD,
--  SALUTATION_CD,
--  BIRTH_DT,
--  GENDER_CD,
--  MARITAL_STATUS,
--  PRIMARY_ADDRESS_LINE1,
--  PRIMARY_ADDRESS_LINE2,
--  PRIMARY_CITY,
--  PRIMARY_STATE,
--  PRIMARY_ZIP,
--  PRIMARY_EMAIL_ADDRESS,
--  MEM_RESIDENTIAL_ADDRESS_LINE1 AS RESIDENTIAL_ADDRESS_LINE1,
--  MEM_RESIDENTIAL_ADDRESS_LINE2 AS RESIDENTIAL_ADDRESS_LINE2,
--  MEM_RESIDENTIAL_CITY AS RESIDENTIAL_CITY,
--  MEM_RESIDENTIAL_STATE AS RESIDENTIAL_STATE,
--  MEM_RESIDENTIAL_ZIP AS RESIDENTIAL_ZIP,
--  MEM_BILLING_ADDRESS_LINE1 AS BILLING_ADDRESS_LINE1,
--  MEM_BILLING_ADDRESS_LINE2 AS BILLING_ADDRESS_LINE2,
--  MEM_BILLING_CITY AS BILLING_CITY,
--  MEM_BILLING_STATE AS BILLING_STATE,
--  MEM_BILLING_ZIP AS BILLING_ZIP,
--  MEM_OTHER_ADDRESS_LINE1 AS OTHER_ADDRESS_LINE1,
--  MEM_OTHER_ADDRESS_LINE2 AS OTHER_ADDRESS_LINE2,
--  MEM_OTHER_CITY AS OTHER_CITY,
--  MEM_OTHER_STATE AS OTHER_STATE,
--  MEM_OTHER_ZIP AS OTHER_ZIP,
--  MEM_EMAIL_ADDRESS AS OTHER_EMAIL_ADDRESS,
--	COALESCE(MEM_RESIDENTIAL_PHONE_NUM,MEM_WORK_PHONE_NUM,MEM_OTHER_PHONE_NUM) AS PRIMARY_PHONE_NUM,
--  MEM_RESIDENTIAL_PHONE_NUM AS HOME_TELEPHONE_NUM,
--  MEM_WORK_PHONE_NUM AS WORK_PHONE_NUM,
--  MEM_OTHER_PHONE_NUM AS OTHER_PHONE_NUM,
--  MEM_CREATE_DATE AS SOURCE_CREATE_DATE,
--	TERM_EXPIRATION_DT
--FROM (
--  SELECT
--    A.MEMBER_NUM AS MEMBER_NUM,
--    A.MEMBERSHIP_NUM AS MEMBERSHIP_ID,
--    A.ASSOCIATE_ID AS ASSOC_CODE,
--    UPPER(A.FIRST_NM) AS FIRST_NM,
--    UPPER(A.LAST_NM) AS LAST_NM,
--    UPPER(A.NAME_SUFFIX_CD) AS NAME_SUFFIX_CD,
--    UPPER(A.SALUTATION_CD) AS SALUTATION_CD,
--    CASE
--      WHEN BIRTH_DT < PARSE_DATE('%Y-%m-%d', '1910-01-01') OR BIRTH_DT > DATE_SUB(CURRENT_DATE(),INTERVAL 10 YEAR) THEN NULL
--      ELSE BIRTH_DT
--    END AS BIRTH_DT,
--    UPPER(A.GENDER_CD) AS GENDER_CD,
--    CAST(NULL AS STRING) AS MARITAL_STATUS,
--    CASE
--      WHEN RESIDENTIAL_ADDRESS_LINE1 IS NULL 
--			THEN CASE
--			WHEN BILLING_ADDRESS_LINE1 IS NULL 
--				THEN UPPER(TEMPORARY_ADDRESS_LINE1)
--				ELSE UPPER(BILLING_ADDRESS_LINE1)
--				END
--      ELSE UPPER(RESIDENTIAL_ADDRESS_LINE1)
--    END AS PRIMARY_ADDRESS_LINE1,
--    CASE
--      WHEN RESIDENTIAL_ADDRESS_LINE1 IS NULL THEN CASE
--      WHEN BILLING_ADDRESS_LINE1 IS NULL THEN UPPER(TEMPORARY_ADDRESS_LINE2)
--      ELSE UPPER(BILLING_ADDRESS_LINE2)
--    END
--      ELSE UPPER(RESIDENTIAL_ADDRESS_LINE2)
--    END AS PRIMARY_ADDRESS_LINE2,
--    CASE
--      WHEN RESIDENTIAL_ADDRESS_LINE1 IS NULL THEN CASE
--      WHEN BILLING_ADDRESS_LINE1 IS NULL THEN UPPER(TEMPORARY_CITY)
--      ELSE UPPER(BILLING_CITY)
--    END
--      ELSE UPPER(RESIDENTIAL_CITY)
--    END AS PRIMARY_CITY,
--    CASE
--      WHEN RESIDENTIAL_ADDRESS_LINE1 IS NULL THEN CASE
--      WHEN BILLING_ADDRESS_LINE1 IS NULL THEN UPPER(TEMPORARY_STATE)
--      ELSE UPPER(BILLING_STATE)
--    END
--      ELSE UPPER(RESIDENTIAL_STATE)
--    END AS PRIMARY_STATE,
--    CASE
--      WHEN RESIDENTIAL_ADDRESS_LINE1 IS NULL THEN CASE
--      WHEN BILLING_ADDRESS_LINE1 IS NULL THEN UPPER(TEMPORARY_ZIP)
--      ELSE UPPER(BILLING_ZIP)
--    END
--      ELSE UPPER(RESIDENTIAL_ZIP)
--    END AS PRIMARY_ZIP,
--    UPPER(EMAIL_ADDRESS) AS PRIMARY_EMAIL_ADDRESS,
--    UPPER(RESIDENTIAL_ADDRESS_LINE1) AS MEM_RESIDENTIAL_ADDRESS_LINE1,
--    UPPER(RESIDENTIAL_ADDRESS_LINE2) AS MEM_RESIDENTIAL_ADDRESS_LINE2,
--    UPPER(RESIDENTIAL_CITY) AS MEM_RESIDENTIAL_CITY,
--    UPPER(RESIDENTIAL_STATE) AS MEM_RESIDENTIAL_STATE,
--    RESIDENTIAL_ZIP AS MEM_RESIDENTIAL_ZIP,
--    UPPER(BILLING_ADDRESS_LINE1) AS MEM_BILLING_ADDRESS_LINE1,
--    UPPER(BILLING_ADDRESS_LINE2) AS MEM_BILLING_ADDRESS_LINE2,
--    UPPER(BILLING_CITY) AS MEM_BILLING_CITY,
--    UPPER(BILLING_STATE) AS MEM_BILLING_STATE,
--    BILLING_ZIP AS MEM_BILLING_ZIP,
--    UPPER(TEMPORARY_ADDRESS_LINE1) AS MEM_OTHER_ADDRESS_LINE1,
--    UPPER(TEMPORARY_ADDRESS_LINE2) AS MEM_OTHER_ADDRESS_LINE2,
--    UPPER(TEMPORARY_CITY) AS MEM_OTHER_CITY,
--    UPPER(TEMPORARY_STATE) AS MEM_OTHER_STATE,
--    TEMPORARY_ZIP AS MEM_OTHER_ZIP,
--    UPPER(EMAIL_ADDRESS) AS MEM_EMAIL_ADDRESS,
--    HOME_PHONE_NUM AS MEM_RESIDENTIAL_PHONE_NUM,
--    WORK_PHONE_NUM AS MEM_WORK_PHONE_NUM,
--    MOBILE_PHONE_NUM AS MEM_OTHER_PHONE_NUM,
--    DATE(UPDATE_DTTIME) AS MEM_CREATE_DATE,
--	  C.TERM_EXPIRATION_DT AS TERM_EXPIRATION_DT
--  FROM
--   CUSTOMERS.MEMBERSHIP_CUSTOMER_DIM A
--	  LEFT OUTER JOIN
--	(select MEMBERSHIP_NUM,TERM_EXPIRATION_DT from CUSTOMER_PRODUCT.CONNECTSUITE_MEMBERSHIP_DIM  where ACTIVE_FLG='Y') C
--	on A.MEMBERSHIP_NUM=C.MEMBERSHIP_NUM
--	WHERE A.ACTIVE_FLG='Y'))
	
INSERT INTO
  LANDING.MDM_EXCEPTIONS ( SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    BILLING_ADDRESS_LINE1,
    BILLING_ADDRESS_LINE2,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
    OTHER_ADDRESS_LINE1,
    OTHER_ADDRESS_LINE2,
    OTHER_CITY,
    OTHER_STATE,
    OTHER_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    INSERT_DT)
SELECT
  SOURCE_KEY1,
    SOURCE_KEY2,
    SOURCE_KEY3,
    SOURCE_KEY1_DESC,
    SOURCE_KEY2_DESC,
    SOURCE_KEY3_DESC,
    SOURCE_SYSTEM_CD,
    FIRST_NM,
    LAST_NM,
    NAME_SUFFIX_CD,
    SALUTATION_CD,
    BIRTH_DT,
    GENDER_CD,
    MARITAL_STATUS,
    PRIMARY_ADDRESS_LINE1,
    PRIMARY_ADDRESS_LINE2,
    PRIMARY_CITY,
    PRIMARY_STATE,
    PRIMARY_ZIP,
    PRIMARY_EMAIL_ADDRESS,
    RESIDENTIAL_ADDRESS_LINE1,
    RESIDENTIAL_ADDRESS_LINE2,
    RESIDENTIAL_CITY,
    RESIDENTIAL_STATE,
    RESIDENTIAL_ZIP,
    BILLING_ADDRESS_LINE1,
    BILLING_ADDRESS_LINE2,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
    OTHER_ADDRESS_LINE1,
    OTHER_ADDRESS_LINE2,
    OTHER_CITY,
    OTHER_STATE,
    OTHER_ZIP,
    OTHER_EMAIL_ADDRESS,
    HOME_TELEPHONE_NUM,
    WORK_PHONE_NUM,
    OTHER_PHONE_NUM,
    SOURCE_CREATE_DATE,
    CURRENT_DATETIME()
FROM
  LANDING.WORK_MDM_MEMBERSHIP
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL;
  
DELETE
FROM
  LANDING.WORK_MDM_MEMBERSHIP
WHERE
  REGEXP_CONTAINS(PRIMARY_CITY, '[0-9]')
  OR LENGTH(PRIMARY_ZIP) < 5
  OR LENGTH(PRIMARY_ZIP) >10
  OR REGEXP_CONTAINS(FIRST_NM, '[0-9]')
  OR REGEXP_CONTAINS(LAST_NM, '[0-9]')
  OR FIRST_NM IS NULL
  OR LAST_NM IS NULL;  	
----------------------------------------------------------------------
--STEP2.1
----------------------------------------------------------------------
update  LANDING.WORK_MDM_MEMBERSHIP set MERGE_FLAG='Ignore'
where MERGE_FLAG ='      ' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)=0;

----------------------------------------------------------------------
--STEP2.2
----------------------------------------------------------------------
update  LANDING.WORK_MDM_MEMBERSHIP set MERGE_FLAG='Golden'
where MERGE_FLAG ='      ' 
AND MERGE_CHECK2_CTL in (0,1) and MERGE_CHECK1_CTL in (0,1);


UPDATE LANDING.WORK_MDM_MEMBERSHIP D
SET D.FIRST_VALUE_MATCH_GROUP=C.FIRST_VALUE_MATCH_GROUP
FROM (select SOURCE_KEY1,
FIRST_VALUE(SOURCE_KEY1) OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),
BIRTH_DT ORDER BY TERM_EXPIRATION_DT DESC,SOURCE_CREATE_DATE DESC,SOURCE_KEY1 ASC) FIRST_VALUE_MATCH_GROUP
from LANDING.WORK_MDM_MEMBERSHIP where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) C
WHERE C.SOURCE_KEY1=D.SOURCE_KEY1
and D.MERGE_FLAG ='      ';


----------------------------------------------------------------------
--STEP2.3
----------------------------------------------------------------------
update  LANDING.WORK_MDM_MEMBERSHIP A set A.MERGE_FLAG='Golden' 
where exists (select 1 from 
(select SOURCE_KEY1,ROW_NUMBER() OVER (PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),BIRTH_DT ORDER BY TERM_EXPIRATION_DT DESC,SOURCE_CREATE_DATE DESC,SOURCE_KEY1 ASC) AS ROW_NUM  from LANDING.WORK_MDM_MEMBERSHIP where MERGE_FLAG ='      '  
and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2) B
where B.SOURCE_KEY1=A.SOURCE_KEY1 and ROW_NUM=1)
and MERGE_FLAG ='      ';

----------------------------------------------------------------------
--STEP2.3
----------------------------------------------------------------------
update  LANDING.WORK_MDM_MEMBERSHIP set MERGE_FLAG='Merge'
where MERGE_FLAG ='      ' and (MERGE_CHECK2_CTL+MERGE_CHECK1_CTL)>=2;

----------------------------------------------------------------------

----------------------------------------------------------------------
--STEP2.6
----------------------------------------------------------------------

update  LANDING.WORK_MDM_MEMBERSHIP A 
SET A.MERGE_FLAG='DOB_Merge',A.FIRST_VALUE_MATCH_GROUP=B.FIRST_VALUE_MATCH_GROUP
FROM (
select C.SOURCE_KEY1 as SOURCE_KEY1,D.SOURCE_KEY1 as FIRST_VALUE_MATCH_GROUP FROM
(select * from LANDING.WORK_MDM_MEMBERSHIP where BIRTH_DT IS NULL and MERGE_FLAG='Golden' )C
INNER JOIN (select *,
ROW_NUMBER() OVER(PARTITION BY UPPER(FIRST_NM),UPPER(LAST_NM),UPPER(PRIMARY_ADDRESS_LINE1),UPPER(PRIMARY_ADDRESS_LINE2),UPPER(PRIMARY_CITY),
    UPPER(PRIMARY_STATE),UPPER(PRIMARY_ZIP) ORDER BY TERM_EXPIRATION_DT DESC,SOURCE_CREATE_DATE DESC,SOURCE_KEY1 DESC) as ROW_NUM
    FROM LANDING.WORK_MDM_MEMBERSHIP where MERGE_FLAG='Golden' and BIRTH_DT IS NOT NULL ) D
ON COALESCE(C.FIRST_NM,'~')=COALESCE(D.FIRST_NM,'~')
AND COALESCE(C.LAST_NM,'~')=COALESCE(D.LAST_NM,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE1,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE1,'~')
AND COALESCE(C.PRIMARY_ADDRESS_LINE2,'~')=COALESCE(D.PRIMARY_ADDRESS_LINE2,'~') 
AND COALESCE(C.PRIMARY_CITY,'~')=COALESCE(D.PRIMARY_CITY,'~') 
AND COALESCE(C.PRIMARY_STATE,'~')=COALESCE(D.PRIMARY_STATE,'~')
AND COALESCE(C.PRIMARY_ZIP,'~')=COALESCE(D.PRIMARY_ZIP,'~')
and D.ROW_NUM=1) B
where A.SOURCE_KEY1=B.SOURCE_KEY1;

----------------------------------------------------------------------
--STEP2.7
----------------------------------------------------------------------

update  LANDING.WORK_MDM_MEMBERSHIP A 
SET A.FIRST_VALUE_MATCH_GROUP=B.FIRST_VALUE_MATCH_GROUP
FROM (select DOB.FIRST_VALUE_MATCH_GROUP AS FIRST_VALUE_MATCH_GROUP,
M.SOURCE_KEY1 as SOURCE_KEY1 FROM
(select SOURCE_KEY1,FIRST_VALUE_MATCH_GROUP from LANDING.WORK_MDM_MEMBERSHIP  
where MERGE_FLAG='DOB_Merge') DOB,
(select SOURCE_KEY1,FIRST_VALUE_MATCH_GROUP from LANDING.WORK_MDM_MEMBERSHIP  
where MERGE_FLAG='Merge') M
where DOB.SOURCE_KEY1=M.FIRST_VALUE_MATCH_GROUP) B
where A.MERGE_FLAG='Merge'
AND A.SOURCE_KEY1=B.SOURCE_KEY1;

----------------------------------------------------------------------
--STEP2.8
----------------------------------------------------------------------

update LANDING.WORK_MDM_MEMBERSHIP SET MERGE_FLAG='Merge'
where MERGE_FLAG='DOB_Merge'