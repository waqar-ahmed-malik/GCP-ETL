/*
Overall flow of this script is
Step0 Prepare the INS Customer data for the MDM process
Step1 update dimension records that have already been tied to records in the bridge table
Step2 Insert records into the bridge table for records that we have a match on the name, birth date, and address
Step3 Insert records into the bridge table for records that we have a match on the name, birth date, and email address
Step4 Insert new records into the dimension table and bridge table for any new members
MDM Process starts by creating the initial work table that contains all customer data currently in the system with fields standardized for MDM
*/

--First step is to update records in the mdm_customer_dim that have previously been linked and then delete those records from the working table
--echo STEP1: starting update of previously linked customers
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NAME=CASE WHEN A.FIRST_NAME IS NULL THEN B.FIRST_NAME ELSE A.FIRST_NAME END, 
A.LAST_NAME= CASE WHEN A.LAST_NAME IS NULL THEN B.LAST_NAME ELSE A.LAST_NAME END,
A.NAME_SUFFIX_CD=CASE WHEN A.NAME_SUFFIX_CD IS NULL THEN B.NAME_SUFFIX_CD ELSE A.NAME_SUFFIX_CD END,  
A.SALUTATION_CD=CASE WHEN A.SALUTATION_CD IS NULL THEN B.SALUTATION_CD ELSE A.SALUTATION_CD END,
A.BIRTH_DATE=CASE WHEN A.BIRTH_DATE IS NULL THEN B.BIRTH_DATE ELSE A.BIRTH_DATE END, 
A.GENDER_CD=CASE WHEN A.GENDER_CD IS NULL THEN B.GENDER_CD ELSE A.GENDER_CD END, 
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.PRIMARY_EMAIL_ADDRESS ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.INS_RESIDENTIAL_ADDRESS_LINE1=B.INS_RESIDENTIAL_ADDRESS_LINE1, 
A.INS_RESIDENTIAL_ADDRESS_LINE2=B.INS_RESIDENTIAL_ADDRESS_LINE2, 
A.INS_RESIDENTIAL_CITY=B.INS_RESIDENTIAL_CITY, 
A.INS_RESIDENTIAL_STATE=B.INS_RESIDENTIAL_STATE,
A.INS_RESIDENTIAL_ZIP=B.INS_RESIDENTIAL_ZIP,
A.INS_BILLING_ADDRESS_LINE1=B.INS_BILLING_ADDRESS_LINE1, 
A.INS_BILLING_ADDRESS_LINE2=B.INS_BILLING_ADDRESS_LINE2, 
A.INS_BILLING_CITY=B.INS_BILLING_CITY, 
A.INS_BILLING_STATE=B.INS_BILLING_STATE,
A.INS_BILLING_ZIP=B.INS_BILLING_ZIP, 
A.INS_OTHER_ADDRESS_LINE1=B.INS_OTHER_ADDRESS_LINE1, 
A.INS_OTHER_ADDRESS_LINE2=B.INS_OTHER_ADDRESS_LINE2, 
A.INS_OTHER_CITY=B.INS_OTHER_CITY, 
A.INS_OTHER_STATE=B.INS_OTHER_STATE,
A.INS_OTHER_ZIP=B.INS_OTHER_ZIP,
A.INS_EMAIL_ADDRESS=B.INS_EMAIL_ADDRESS,
A.INS_RESIDENTIAL_PHONE_NUM=B.INS_RESIDENTIAL_PHONE_NUM,
A.INS_WORK_PHONE_NUM=B.INS_WORK_PHONE_NUM,
A.INS_OTHER_PHONE_NUM=B.INS_OTHER_PHONE_NUM,
A.INS_CREATE_DATE=B.INS_CREATE_DATE
FROM (
SELECT 
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,  
SALUTATION_CD,
BIRTH_DATE, 
GENDER_CD, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1, 
INS_RESIDENTIAL_ADDRESS_LINE2, 
INS_RESIDENTIAL_CITY, 
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1, 
INS_BILLING_ADDRESS_LINE2, 
INS_BILLING_CITY, 
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1, 
INS_OTHER_ADDRESS_LINE2, 
INS_OTHER_CITY, 
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY INS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_WORK_INS_STG C
INNER JOIN CUSTOMERS.MDM_CUSTOMER_BRIDGE D
ON CAST(C.ENTERPRISE_ID AS STRING)=D.SOURCE_KEY1 AND D.SOURCE_SYSTEM='INS'
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1 ;

--echo STEP1: previously linked customers are updated, removing those customers from the work table

DELETE FROM CUSTOMERS.MDM_WORK_INS_STG A
WHERE CAST(A.ENTERPRISE_ID AS STRING) IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='INS');
/*
echo STEP1: previously linked records are deleted
echo STEP1: record count in CUSTOMERS.MDM_WORK_INS_STG is `bq query --use_legacy_sql=false "select count(0) from CUSTOMERS.MDM_WORK_INS_STG"`
echo STEP1: cleaning up records that have been updated to have the same nk
echo STEP1: updating the bridge table 
*/

UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE)
B
ON A.FIRST_NAME=B.FIRST_NAME 
AND A.LAST_NAME=B.LAST_NAME 
AND A.BIRTH_DATE=B.BIRTH_DATE
AND A.PRIMARY_ADDRESS_LINE1=B.PRIMARY_ADDRESS_LINE1 
AND A.PRIMARY_CITY=B.PRIMARY_CITY 
AND A.PRIMARY_STATE=B.PRIMARY_STATE
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;

--echo STEP1: bridge table updated
--echo STEP1: deleting records from customer dim that no longer have any matches 
DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);
--echo STEP1: finished deleting previous duplicates
--####Step 2 is to update based on the member id and assoc code
--####Step 3 is to update based on the name, date, and address
--echo STEP2: starting update of customer dim for records linked on the name, birth date and address
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NAME=CASE WHEN A.FIRST_NAME IS NULL THEN B.FIRST_NAME ELSE A.FIRST_NAME END, 
A.LAST_NAME= CASE WHEN A.LAST_NAME IS NULL THEN B.LAST_NAME ELSE A.LAST_NAME END,
A.NAME_SUFFIX_CD=CASE WHEN A.NAME_SUFFIX_CD IS NULL THEN B.NAME_SUFFIX_CD ELSE A.NAME_SUFFIX_CD END,  
A.SALUTATION_CD=CASE WHEN A.SALUTATION_CD IS NULL THEN B.SALUTATION_CD ELSE A.SALUTATION_CD END,
A.BIRTH_DATE=CASE WHEN A.BIRTH_DATE IS NULL THEN B.BIRTH_DATE ELSE A.BIRTH_DATE END, 
A.GENDER_CD=CASE WHEN A.GENDER_CD IS NULL THEN B.GENDER_CD ELSE A.GENDER_CD END, 
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.PRIMARY_EMAIL_ADDRESS ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.INS_RESIDENTIAL_ADDRESS_LINE1=B.INS_RESIDENTIAL_ADDRESS_LINE1, 
A.INS_RESIDENTIAL_ADDRESS_LINE2=B.INS_RESIDENTIAL_ADDRESS_LINE2, 
A.INS_RESIDENTIAL_CITY=B.INS_RESIDENTIAL_CITY, 
A.INS_RESIDENTIAL_STATE=B.INS_RESIDENTIAL_STATE,
A.INS_RESIDENTIAL_ZIP=B.INS_RESIDENTIAL_ZIP,
A.INS_BILLING_ADDRESS_LINE1=B.INS_BILLING_ADDRESS_LINE1, 
A.INS_BILLING_ADDRESS_LINE2=B.INS_BILLING_ADDRESS_LINE2, 
A.INS_BILLING_CITY=B.INS_BILLING_CITY, 
A.INS_BILLING_STATE=B.INS_BILLING_STATE,
A.INS_BILLING_ZIP=B.INS_BILLING_ZIP, 
A.INS_OTHER_ADDRESS_LINE1=B.INS_OTHER_ADDRESS_LINE1, 
A.INS_OTHER_ADDRESS_LINE2=B.INS_OTHER_ADDRESS_LINE2, 
A.INS_OTHER_CITY=B.INS_OTHER_CITY, 
A.INS_OTHER_STATE=B.INS_OTHER_STATE,
A.INS_OTHER_ZIP=B.INS_OTHER_ZIP,
A.INS_EMAIL_ADDRESS=B.INS_EMAIL_ADDRESS,
A.INS_RESIDENTIAL_PHONE_NUM=B.INS_RESIDENTIAL_PHONE_NUM,
A.INS_WORK_PHONE_NUM=B.INS_WORK_PHONE_NUM,
A.INS_OTHER_PHONE_NUM=B.INS_OTHER_PHONE_NUM,
A.INS_CREATE_DATE=B.INS_CREATE_DATE
FROM (
SELECT 
CUSTOMER_MDM_KEY,
C.FIRST_NAME, 
C.LAST_NAME, 
NAME_SUFFIX_CD,  
SALUTATION_CD,
( CASE WHEN (C.BIRTH_DATE IS NULL)
       OR (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) )
      -- OR (C.BIRTH_DATE IS NULL)
       OR ((C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01) AND NOT (D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
       THEN D.BIRTH_DATE
       ELSE C.BIRTH_DATE END ) AS BIRTH_DATE, 
GENDER_CD, 
C.PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
C.PRIMARY_CITY, 
C.PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1, 
INS_RESIDENTIAL_ADDRESS_LINE2, 
INS_RESIDENTIAL_CITY, 
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1, 
INS_BILLING_ADDRESS_LINE2, 
INS_BILLING_CITY, 
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1, 
INS_OTHER_ADDRESS_LINE2, 
INS_OTHER_CITY, 
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY INS_CREATE_DATE DESC) AS DUP_CHECK
FROM 
(
SELECT
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,  
SALUTATION_CD,
BIRTH_DATE, 
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2099-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE_JOIN, 
GENDER_CD, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1, 
INS_RESIDENTIAL_ADDRESS_LINE2, 
INS_RESIDENTIAL_CITY, 
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1, 
INS_BILLING_ADDRESS_LINE2, 
INS_BILLING_CITY, 
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1, 
INS_OTHER_ADDRESS_LINE2, 
INS_OTHER_CITY, 
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE
FROM
CUSTOMERS.MDM_WORK_INS_STG ) C
INNER JOIN 
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
BIRTH_DATE,
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2099-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE_JOIN, 
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ORDER BY MEM_CREATE_DATE DESC, INS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND C.PRIMARY_ADDRESS_LINE1=D.PRIMARY_ADDRESS_LINE1 
AND C.PRIMARY_CITY=D.PRIMARY_CITY 
AND C.PRIMARY_STATE=D.PRIMARY_STATE
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1 ;

--echo STEP2: customers linked by the membership id and assoc code are updated
--echo STEP2: inserting records into bridge table for records linked by name, birth date, and address
--bq query --use_legacy_sql=false "
INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME
)
SELECT 
'INS' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
CAST(ENTERPRISE_ID AS STRING) AS SOURCE_KEY1,
'ENTERPRISE_ID' AS SOURCE_KEY1_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
BIRTH_DATE,
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2099-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE_JOIN, 
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ORDER BY MEM_CREATE_DATE DESC, INS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) C
INNER JOIN 
(SELECT
ENTERPRISE_ID,
FIRST_NAME,
LAST_NAME, 
BIRTH_DATE,
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2099-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE_JOIN, 
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE
from CUSTOMERS.MDM_WORK_INS_STG
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND ( CASE WHEN (C.BIRTH_DATE IS NULL)
       OR (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) )
       OR (C.BIRTH_DATE IS NULL)
       OR ((C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01) AND NOT (D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
       THEN D.BIRTH_DATE
       ELSE C.BIRTH_DATE END )=
 ( CASE WHEN (D.BIRTH_DATE IS NULL)
       OR (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) )
       OR (D.BIRTH_DATE IS NULL)
       OR ((D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01))
       OR ((EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900))
       OR ((EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01) AND NOT (C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
       THEN C.BIRTH_DATE
       ELSE D.BIRTH_DATE END )
AND C.PRIMARY_ADDRESS_LINE1=D.PRIMARY_ADDRESS_LINE1 
AND C.PRIMARY_CITY=D.PRIMARY_CITY 
AND C.PRIMARY_STATE=D.PRIMARY_STATE
AND C.DUP_CHECK=1;

DELETE FROM CUSTOMERS.MDM_WORK_INS_STG A
WHERE CAST(A.ENTERPRISE_ID AS STRING) IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='INS');
/*
echo STEP2: previously linked records are deleted
echo STEP2: record count in CUSTOMERS.MDM_WORK_INS_STG is `bq query --use_legacy_sql=false "select count(0) from CUSTOMERS.MDM_WORK_INS_STG"`
echo STEP2: cleaning up records that have been updated to have the same nk
echo STEP2: updating the bridge table 
*/

UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE)
B
ON A.FIRST_NAME=B.FIRST_NAME 
AND A.LAST_NAME=B.LAST_NAME 
AND A.BIRTH_DATE=B.BIRTH_DATE
AND A.PRIMARY_ADDRESS_LINE1=B.PRIMARY_ADDRESS_LINE1 
AND A.PRIMARY_CITY=B.PRIMARY_CITY 
AND A.PRIMARY_STATE=B.PRIMARY_STATE
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;
/*
echo STEP2: bridge table updated
echo STEP2: deleting records from customer dim that no longer have any matches 

*/
DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);
/*
####Step3 is to update based on the name, birth date, and email address
echo STEP3: starting update of customer dim for records linked on the name, birth date, and email address
bq query --use_legacy_sql=false 
*/
UPDATE CUSTOMERS.MDM_CUSTOMER_DIM A
SET
A.FIRST_NAME=CASE WHEN A.FIRST_NAME IS NULL THEN B.FIRST_NAME ELSE A.FIRST_NAME END, 
A.LAST_NAME= CASE WHEN A.LAST_NAME IS NULL THEN B.LAST_NAME ELSE A.LAST_NAME END,
A.NAME_SUFFIX_CD=CASE WHEN A.NAME_SUFFIX_CD IS NULL THEN B.NAME_SUFFIX_CD ELSE A.NAME_SUFFIX_CD END,  
A.SALUTATION_CD=CASE WHEN A.SALUTATION_CD IS NULL THEN B.SALUTATION_CD ELSE A.SALUTATION_CD END,
A.BIRTH_DATE=CASE WHEN A.BIRTH_DATE IS NULL THEN B.BIRTH_DATE ELSE A.BIRTH_DATE END, 
A.GENDER_CD=CASE WHEN A.GENDER_CD IS NULL THEN B.GENDER_CD ELSE A.GENDER_CD END, 
A.PRIMARY_ADDRESS_LINE1=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE1 ELSE A.PRIMARY_ADDRESS_LINE1 END, 
A.PRIMARY_ADDRESS_LINE2=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ADDRESS_LINE2 ELSE A.PRIMARY_ADDRESS_LINE2 END, 
A.PRIMARY_CITY=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_CITY ELSE A.PRIMARY_CITY END, 
A.PRIMARY_STATE=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_STATE ELSE A.PRIMARY_STATE END,
A.PRIMARY_ZIP=CASE WHEN A.PRIMARY_STATE IS NULL THEN B.PRIMARY_ZIP ELSE A.PRIMARY_ZIP END,
A.PRIMARY_EMAIL_ADDRESS=CASE WHEN A.PRIMARY_EMAIL_ADDRESS IS NULL THEN B.PRIMARY_EMAIL_ADDRESS ELSE A.PRIMARY_EMAIL_ADDRESS END,
A.INS_RESIDENTIAL_ADDRESS_LINE1=B.INS_RESIDENTIAL_ADDRESS_LINE1, 
A.INS_RESIDENTIAL_ADDRESS_LINE2=B.INS_RESIDENTIAL_ADDRESS_LINE2, 
A.INS_RESIDENTIAL_CITY=B.INS_RESIDENTIAL_CITY, 
A.INS_RESIDENTIAL_STATE=B.INS_RESIDENTIAL_STATE,
A.INS_RESIDENTIAL_ZIP=B.INS_RESIDENTIAL_ZIP,
A.INS_BILLING_ADDRESS_LINE1=B.INS_BILLING_ADDRESS_LINE1, 
A.INS_BILLING_ADDRESS_LINE2=B.INS_BILLING_ADDRESS_LINE2, 
A.INS_BILLING_CITY=B.INS_BILLING_CITY, 
A.INS_BILLING_STATE=B.INS_BILLING_STATE,
A.INS_BILLING_ZIP=B.INS_BILLING_ZIP, 
A.INS_OTHER_ADDRESS_LINE1=B.INS_OTHER_ADDRESS_LINE1, 
A.INS_OTHER_ADDRESS_LINE2=B.INS_OTHER_ADDRESS_LINE2, 
A.INS_OTHER_CITY=B.INS_OTHER_CITY, 
A.INS_OTHER_STATE=B.INS_OTHER_STATE,
A.INS_OTHER_ZIP=B.INS_OTHER_ZIP,
A.INS_EMAIL_ADDRESS=B.INS_EMAIL_ADDRESS,
A.INS_RESIDENTIAL_PHONE_NUM=B.INS_RESIDENTIAL_PHONE_NUM,
A.INS_WORK_PHONE_NUM=B.INS_WORK_PHONE_NUM,
A.INS_OTHER_PHONE_NUM=B.INS_OTHER_PHONE_NUM,
A.INS_CREATE_DATE=B.INS_CREATE_DATE
FROM (
SELECT 
CUSTOMER_MDM_KEY,
C.FIRST_NAME, 
C.LAST_NAME, 
NAME_SUFFIX_CD,  
SALUTATION_CD,
( CASE WHEN (C.BIRTH_DATE IS NULL)
       OR (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) )
       OR (C.BIRTH_DATE IS NULL)
       OR ((C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01) AND NOT (D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
       THEN D.BIRTH_DATE
       ELSE C.BIRTH_DATE END ) AS BIRTH_DATE, 
GENDER_CD, 
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
C.PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1, 
INS_RESIDENTIAL_ADDRESS_LINE2, 
INS_RESIDENTIAL_CITY, 
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1, 
INS_BILLING_ADDRESS_LINE2, 
INS_BILLING_CITY, 
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1, 
INS_OTHER_ADDRESS_LINE2, 
INS_OTHER_CITY, 
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY CUSTOMER_MDM_KEY ORDER BY INS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_WORK_INS_STG C
INNER JOIN 
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
BIRTH_DATE,
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_EMAIL_ADDRESS ORDER BY MEM_CREATE_DATE DESC, INS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND C.PRIMARY_EMAIL_ADDRESS=D.PRIMARY_EMAIL_ADDRESS
) B
WHERE A.CUSTOMER_MDM_KEY=B.CUSTOMER_MDM_KEY AND DUP_CHECK=1;

--echo STEP3: customers linked by the name, birth date, and email address
--echo STEP3: inserting records into bridge table for records linked by name, birth date, and email address
INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME
)
Select 
'INS' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
CAST(ENTERPRISE_ID AS STRING) AS SOURCE_KEY1,
'ENTERPRISE_ID' AS SOURCE_KEY1_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
BIRTH_DATE,
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_EMAIL_ADDRESS ORDER BY MEM_CREATE_DATE DESC, INS_CREATE_DATE DESC) AS DUP_CHECK
FROM CUSTOMERS.MDM_CUSTOMER_DIM
) C
INNER JOIN 
(SELECT
ENTERPRISE_ID,
FIRST_NAME,
LAST_NAME, 
BIRTH_DATE,
PRIMARY_EMAIL_ADDRESS
from CUSTOMERS.MDM_WORK_INS_STG
) D
ON C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND ( CASE WHEN (C.BIRTH_DATE IS NULL)
       OR (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) )
       OR (C.BIRTH_DATE IS NULL)
       OR ((C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900))
       OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01) AND NOT (D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
       THEN D.BIRTH_DATE
       ELSE C.BIRTH_DATE END )=
 ( CASE WHEN (D.BIRTH_DATE IS NULL)
       OR (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) )
       OR (D.BIRTH_DATE IS NULL)
       OR ((D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01))
       OR ((EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900))
       OR ((EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01) AND NOT (C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
       THEN C.BIRTH_DATE
       ELSE D.BIRTH_DATE END )
AND C.PRIMARY_EMAIL_ADDRESS=D.PRIMARY_EMAIL_ADDRESS
AND C.DUP_CHECK=1;

DELETE FROM CUSTOMERS.MDM_WORK_INS_STG A
WHERE CAST(A.ENTERPRISE_ID AS STRING) IN (SELECT SOURCE_KEY1 FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE WHERE SOURCE_SYSTEM='INS');

UPDATE CUSTOMERS.MDM_CUSTOMER_BRIDGE D
SET D.CUSTOMER_MDM_KEY=C.PRIMARY_CUSTOMER_MDM_KEY
FROM
(SELECT 
B.PRIMARY_CUSTOMER_MDM_KEY,
A.CUSTOMER_MDM_KEY
FROM
(
SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_EMAIL_ADDRESS,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_EMAIL_ADDRESS ORDER BY CUSTOMER_MDM_KEY ASC) AS DUP_CHECK
from CUSTOMERS.MDM_CUSTOMER_DIM 
)A 
INNER JOIN
(SELECT 
MIN(CUSTOMER_MDM_KEY) AS PRIMARY_CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_EMAIL_ADDRESS
from CUSTOMERS.MDM_CUSTOMER_DIM
GROUP BY 
FIRST_NAME, 
LAST_NAME, 
BIRTH_DATE, 
PRIMARY_EMAIL_ADDRESS)
B
ON A.FIRST_NAME=B.FIRST_NAME 
AND A.LAST_NAME=B.LAST_NAME 
AND A.BIRTH_DATE=B.BIRTH_DATE
AND A.PRIMARY_EMAIL_ADDRESS=B.PRIMARY_EMAIL_ADDRESS
AND A.DUP_CHECK>1) C
WHERE C.CUSTOMER_MDM_KEY=D.CUSTOMER_MDM_KEY;
/*
echo STEP3: bridge table updated
echo STEP3: deleting records from customer dim that no longer have any matches 
*/

DELETE FROM CUSTOMERS.MDM_CUSTOMER_DIM
WHERE CUSTOMER_MDM_KEY NOT IN (SELECT CUSTOMER_MDM_KEY FROM CUSTOMERS.MDM_CUSTOMER_BRIDGE);
/*
Final step is to insert the records that have not yet been matched
echo STEP4: Inserting new records into the DIM table
*/

INSERT INTO CUSTOMERS.MDM_CUSTOMER_DIM(
CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,
SALUTATION_CD,
BIRTH_DATE,
GENDER_CD,
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1, 
INS_RESIDENTIAL_ADDRESS_LINE2, 
INS_RESIDENTIAL_CITY, 
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1, 
INS_BILLING_ADDRESS_LINE2, 
INS_BILLING_CITY, 
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1, 
INS_OTHER_ADDRESS_LINE2, 
INS_OTHER_CITY, 
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE)
SELECT
(INITIAL_KEY+CASE WHEN CURRENT_KEY IS NULL THEN 0 ELSE CURRENT_KEY END)*100000000 + cast(concat(substr(cast(BIRTH_DATE_GROUP as string),1,4),substr(cast(BIRTH_DATE_GROUP as string),6,2),substr(cast(BIRTH_DATE_GROUP as string),9,2)) as int64) AS CUSTOMER_MDM_KEY,
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,
SALUTATION_CD,
B.BIRTH_DATE,
GENDER_CD,
PRIMARY_ADDRESS_LINE1, 
PRIMARY_ADDRESS_LINE2, 
PRIMARY_CITY, 
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1, 
INS_RESIDENTIAL_ADDRESS_LINE2, 
INS_RESIDENTIAL_CITY, 
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1, 
INS_BILLING_ADDRESS_LINE2, 
INS_BILLING_CITY, 
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1, 
INS_OTHER_ADDRESS_LINE2, 
INS_OTHER_CITY, 
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE
FROM
(SELECT
ROW_NUMBER() OVER (PARTITION BY BIRTH_DATE) AS INITIAL_KEY,
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,
SALUTATION_CD, 
BIRTH_DATE,
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2999-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE_GROUP,
GENDER_CD,
MARITAL_STATUS,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1,
INS_RESIDENTIAL_ADDRESS_LINE2,
INS_RESIDENTIAL_CITY,
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1,
INS_BILLING_ADDRESS_LINE2,
INS_BILLING_CITY,
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1,
INS_OTHER_ADDRESS_LINE2,
INS_OTHER_CITY,
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE
FROM
(SELECT 
FIRST_NAME, 
LAST_NAME, 
NAME_SUFFIX_CD,
SALUTATION_CD, 
BIRTH_DATE,
GENDER_CD,
MARITAL_STATUS,
PRIMARY_ADDRESS_LINE1,
PRIMARY_ADDRESS_LINE2,
PRIMARY_CITY,
PRIMARY_STATE,
PRIMARY_ZIP,
PRIMARY_EMAIL_ADDRESS,
INS_RESIDENTIAL_ADDRESS_LINE1,
INS_RESIDENTIAL_ADDRESS_LINE2,
INS_RESIDENTIAL_CITY,
INS_RESIDENTIAL_STATE,
INS_RESIDENTIAL_ZIP,
INS_BILLING_ADDRESS_LINE1,
INS_BILLING_ADDRESS_LINE2,
INS_BILLING_CITY,
INS_BILLING_STATE,
INS_BILLING_ZIP, 
INS_OTHER_ADDRESS_LINE1,
INS_OTHER_ADDRESS_LINE2,
INS_OTHER_CITY,
INS_OTHER_STATE,
INS_OTHER_ZIP,
INS_EMAIL_ADDRESS,
INS_RESIDENTIAL_PHONE_NUM,
INS_WORK_PHONE_NUM,
INS_OTHER_PHONE_NUM,
INS_CREATE_DATE,
ROW_NUMBER() OVER (PARTITION BY FIRST_NAME, LAST_NAME, BIRTH_DATE, PRIMARY_ADDRESS_LINE1, PRIMARY_CITY, PRIMARY_STATE ORDER BY PRIMARY_EMAIL_ADDRESS, PRIMARY_ADDRESS_LINE1) AS DUP_CHECK
FROM 
CUSTOMERS.MDM_WORK_INS_STG 
WHERE PRIMARY_ADDRESS_LINE1 IS NOT NULL
)A
WHERE DUP_CHECK=1
)B
LEFT OUTER JOIN
(SELECT 
CAST(MAX(ROUND(CUSTOMER_MDM_KEY/100000000,0)) AS INT64) AS CURRENT_KEY, 
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2999-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE
FROM CUSTOMERS.MDM_CUSTOMER_DIM 
GROUP BY BIRTH_DATE) C 
ON B.BIRTH_DATE_GROUP=C.BIRTH_DATE ;
/*
echo STEP4: finished load of INS records into the customer dim
echo STEP4: starting load of new INS records into the customer bridge
*/

INSERT INTO CUSTOMERS.MDM_CUSTOMER_BRIDGE(
SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
SOURCE_KEY1,
SOURCE_KEY1_COLUMN_NAME
)
Select 
'INS' AS SOURCE_SYSTEM,
CUSTOMER_MDM_KEY,
CAST(ENTERPRISE_ID AS STRING) AS SOURCE_KEY1,
'ENTERPRISE_ID' AS SOURCE_KEY1_COLUMN_NAME
from
(SELECT
CUSTOMER_MDM_KEY,
FIRST_NAME,
LAST_NAME,
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2099-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE,
PRIMARY_ADDRESS_LINE1,
PRIMARY_CITY,
PRIMARY_STATE
FROM CUSTOMERS.MDM_CUSTOMER_DIM) C
INNER JOIN 
(SELECT
ENTERPRISE_ID,
FIRST_NAME, 
LAST_NAME,  
CASE WHEN BIRTH_DATE IS NULL THEN CAST('2099-12-31' AS DATE) ELSE BIRTH_DATE END AS BIRTH_DATE,  
PRIMARY_ADDRESS_LINE1, 
PRIMARY_CITY, 
PRIMARY_STATE
from CUSTOMERS.MDM_WORK_INS_STG
) D
on C.FIRST_NAME=D.FIRST_NAME
AND C.LAST_NAME=D.LAST_NAME
AND ( CASE WHEN (C.BIRTH_DATE IS NULL)
	   OR (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) )
	   OR (C.BIRTH_DATE IS NULL)
	   OR ((C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01))
	   OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900))
	   OR ((EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01) AND NOT (D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
	   THEN D.BIRTH_DATE
	   ELSE C.BIRTH_DATE END )=
 ( CASE WHEN (D.BIRTH_DATE IS NULL)
	   OR (EXTRACT(YEAR FROM D.BIRTH_DATE) <= 1900 AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 12) )
	   OR (D.BIRTH_DATE IS NULL)
	   OR ((D.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)) AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE)=EXTRACT(YEAR FROM D.BIRTH_DATE) AND  EXTRACT(DAY FROM C.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM C.BIRTH_DATE) = 01))
	   OR ((EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 31 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 12) AND NOT (EXTRACT(YEAR FROM C.BIRTH_DATE) <= 1900))
	   OR ((EXTRACT(YEAR FROM D.BIRTH_DATE)=EXTRACT(YEAR FROM C.BIRTH_DATE) AND  EXTRACT(DAY FROM D.BIRTH_DATE) = 01 AND EXTRACT(MONTH FROM D.BIRTH_DATE) = 01) AND NOT (C.BIRTH_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)))
	   THEN C.BIRTH_DATE
	   ELSE D.BIRTH_DATE END )
AND C.PRIMARY_ADDRESS_LINE1=D.PRIMARY_ADDRESS_LINE1 
AND C.PRIMARY_CITY=D.PRIMARY_CITY 
AND C.PRIMARY_STATE=D.PRIMARY_STATE;