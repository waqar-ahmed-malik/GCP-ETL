-- UPDATE(MERGE)

--MERGE <target_table> [AS TARGET]
--USING <table_source> [AS SOURCE]
--ON <search_condition>
--[WHEN MATCHED 
--THEN <merge_matched> ]
--[WHEN NOT MATCHED [BY TARGET]
--THEN <merge_not_matched> ]
--[WHEN NOT MATCHED BY SOURCE
--THEN <merge_matched> ];
  
--ERS_STAGE_SERVICE_PROVIDED
--WORK_ERS_STG_SERVICE_PROVIDED

MERGE OPERATIONAL.ERS_STAGE_SERVICE_PROVIDED AS TGT
USING LANDING.WORK_ERS_STG_SERVICE_PROVIDED AS SRC
ON TGT.SVCP_ID = SAFE_CAST(SRC.SVCP_ID AS INT64) AND
TGT.COMM_CTR_ID = SRC.COMM_CTR_ID AND
TGT.SC_DT = SAFE_CAST(SRC.SC_DT AS DATETIME) AND
TGT.SC_ID = SAFE_CAST(SRC.SC_ID AS INT64)
WHEN MATCHED
THEN UPDATE SET
TGT.SVCP_PAY_ID = SAFE_CAST(SRC.SVCP_PAY_ID AS INT64) , 
TGT.SVCP_CD = SRC.SVCP_CD , 
TGT.SVCP_UNITS = SAFE_CAST(SRC.SVCP_UNITS AS FLOAT64) , 
TGT.SVCP_UNIT_COST = SAFE_CAST(SRC.SVCP_UNIT_COST AS FLOAT64), 
TGT.SVCP_UOM_CD = SRC.SVCP_UOM_CD , 
TGT.SVCP_ADD_CHRG = SRC.SVCP_ADD_CHRG , 
TGT.SVCP_BASIC_COST = SAFE_CAST(SRC.SVCP_BASIC_COST AS FLOAT64), 
TGT.SVCP_OTHER_COST = SAFE_CAST(SRC.SVCP_OTHER_COST AS FLOAT64) , 
TGT.SVCP_PLUS_COST = SAFE_CAST(SRC.SVCP_PLUS_COST as FLOAT64), 
TGT.SVCP_ADJ_COST = SAFE_CAST(SRC.SVCP_ADJ_COST AS FLOAT64) , 
TGT.SVCP_TOT_COST = SAFE_CAST(SRC.SVCP_TOT_COST AS FLOAT64), 
TGT.SVCP_DISP_APP = SRC.SVCP_DISP_APP , 
TGT.EMPLE_ID = SRC.EMPLE_ID , 
TGT.SVCP_DISP_PRICE = SRC.SVCP_DISP_PRICE , 
TGT.SVCP_TIER_STATUS = SRC.SVCP_TIER_STATUS , 
TGT.SVCP_RATEC_CD = SRC.SVCP_RATEC_CD , 
TGT.SVCP_TOD_CD = SRC.SVCP_TOD_CD , 
TGT.SC_PROB_CD = SRC.SC_PROB_CD , 
TGT.EXCEPT_FLAG = SRC.EXCEPT_FLAG , 
TGT.SVCP_PLUSRV_COST = SAFE_CAST(SRC.SVCP_PLUSRV_COST AS INT64) , 
TGT.SVCP_TAX1 = SAFE_CAST(SRC.SVCP_TAX1 AS INT64) , 
TGT.SVCP_TAX2 = SAFE_CAST(SRC.SVCP_TAX2 AS INT64) , 
TGT.SVCP_PREM_COST =SAFE_CAST( SRC.SVCP_PREM_COST AS INT64) , 
TGT.SVCP_PRRV_COST = SAFE_CAST(SRC.SVCP_PRRV_COST AS INT64) , 
TGT.ETL_JOB_RUN_ID = CAST(SRC.JOB_RUN_ID AS INT64) , 
TGT.SOURCE_SYSTEM_CD = SRC.SOURCE_SYSTEM_CD ,  
TGT.CREATE_DTTIME = current_datetime() ,
TGT.CREATE_BY = SRC.CREATED_BY ,
TGT.LAST_UPDATE_DTTIME = current_datetime() ,
TGT.LAST_UPDATE_BY = 'v_job_name'

WHEN NOT MATCHED THEN INSERT 
(

SVCP_ID , 
COMM_CTR_ID , 
SC_DT , 
SC_ID , 
SVCP_PAY_ID , 
SVCP_CD , 
SVCP_UNITS , 
SVCP_UNIT_COST , 
SVCP_UOM_CD , 
SVCP_ADD_CHRG , 
SVCP_BASIC_COST , 
SVCP_OTHER_COST , 
SVCP_PLUS_COST , 
SVCP_ADJ_COST , 
SVCP_TOT_COST , 
SVCP_DISP_APP , 
EMPLE_ID , 
SVCP_DISP_PRICE , 
SVCP_TIER_STATUS , 
SVCP_RATEC_CD , 
SVCP_TOD_CD , 
SC_PROB_CD , 
EXCEPT_FLAG , 
SVCP_PLUSRV_COST , 
SVCP_TAX1 , 
SVCP_TAX2 , 
SVCP_PREM_COST , 
SVCP_PRRV_COST , 
ETL_JOB_RUN_ID , 
SOURCE_SYSTEM_CD , 
CREATE_DTTIME , 
CREATE_BY , 
LAST_UPDATE_DTTIME , 
LAST_UPDATE_BY,
DELETE_FLG )

VALUES

(
SAFE_CAST(SRC.SVCP_ID AS INT64) , 
SRC.COMM_CTR_ID , 
SAFE_CAST(SRC.SC_DT AS DATETIME), 
SAFE_CAST(SRC.SC_ID AS INT64), 
SAFE_CAST (SRC.SVCP_PAY_ID AS INT64) , 
SRC.SVCP_CD , 
SAFE_CAST(SRC.SVCP_UNITS AS FLOAT64), 
SAFE_CAST(SRC.SVCP_UNIT_COST AS FLOAT64), 
SRC.SVCP_UOM_CD , 
SRC.SVCP_ADD_CHRG , 
SAFE_CAST(SRC.SVCP_BASIC_COST AS FLOAT64), 
SAFE_CAST(SRC.SVCP_OTHER_COST AS FLOAT64), 
SAFE_CAST(SRC.SVCP_PLUS_COST AS FLOAT64), 
SAFE_CAST(SRC.SVCP_ADJ_COST AS FLOAT64), 
SAFE_CAST(SRC.SVCP_TOT_COST AS FLOAT64), 
SRC.SVCP_DISP_APP , 
SRC.EMPLE_ID , 
SRC.SVCP_DISP_PRICE , 
SRC.SVCP_TIER_STATUS , 
SRC.SVCP_RATEC_CD , 
SRC.SVCP_TOD_CD , 
SRC.SC_PROB_CD , 
SRC.EXCEPT_FLAG , 
SAFE_CAST(SRC.SVCP_PLUSRV_COST AS INT64) , 
SAFE_CAST(SRC.SVCP_TAX1 AS INT64) , 
SAFE_CAST(SRC.SVCP_TAX2 AS INT64) , 
SAFE_CAST(SRC.SVCP_PREM_COST AS INT64) , 
SAFE_CAST(SRC.SVCP_PRRV_COST AS INT64) , 
SAFE_CAST(SRC.JOB_RUN_ID AS INT64) , 
SRC.SOURCE_SYSTEM_CD , 
current_datetime(),
SRC.CREATED_BY ,
current_datetime(),
'v_job_name',
'N'
)