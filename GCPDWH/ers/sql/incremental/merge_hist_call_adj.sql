-- UPDATE(MERGE)

--MERGE <target_table> [AS TARGET]
--USING <table_source> [AS SOURCE]
--ON <search_condition>
--[WHEN MATCHED 
--THEN <merge_matched> ]
--[WHEN NOT MATCHED [BY TARGET]
--THEN <merge_not_matched> ]
--[WHEN NOT MATCHED BY SOURCE
--THEN <merge_matched> ];
  
--ERS_STAGE_ARCH_CALL
--WORK_ERS_STG_ARCH_CALL
MERGE OPERATIONAL.ERS_STAGE_HIST_CALL_ADJ AS TGT
USING LANDING.WORK_ERS_STG_HIST_CALL_ADJ AS SRC
ON 
CAST(TGT.ADJ_SEQ_ID AS STRING) = SRC.ADJ_SEQ_ID
WHEN MATCHED
THEN UPDATE SET
TGT.ADJ_SEQ_ID = CAST(SRC.ADJ_SEQ_ID AS INT64),
TGT.COMM_CTR_ID = SRC.COMM_CTR_ID ,  
TGT.SC_DT = CAST(SRC.SC_DT AS DATETIME) , 
TGT.SC_ID = CAST(SRC.SC_ID AS INT64), 
TGT.DEL_FLAG = SRC.DEL_FLAG, 
TGT.ACCT_TYPE = SRC.ACCT_TYPE , 
TGT.EMPLE_ID = SRC.EMPLE_ID , 
TGT.PAY_ID = CAST(SRC.PAY_ID AS INT64), 
TGT.FACIL_INT_ID = CAST(SRC.FACIL_INT_ID AS INT64) , 
TGT.ADJ_RECORD_DT = CAST(SRC.ADJ_RECORD_DATE AS DATETIME) , 
TGT.PAY_FACIL = SRC.PAY_FACIL , 
TGT.PAY_RECIP = SRC.PAY_RECIP , 
TGT.PAY_1099 = SRC.PAY_1099, 
TGT.CHARGE_ENTL = SRC.CHARGE_ENTL, 
TGT.RECIP_PAY_DT = CAST(SRC.RECIP_PAY_DATE AS DATETIME) , 
TGT.ADJ_DESC = SRC.ADJ_DESCRIPTION , 
TGT.ADJ_SVCP_CD = SRC.ADJ_SVCP_CD , 
TGT.ADJ_UNITS = CAST(SRC.ADJ_UNITS AS FLOAT64) , 
TGT.ADJ_UNIT_COST = CAST(SRC.ADJ_UNIT_COST AS FLOAT64), 
TGT.ADJ_UOM_CD = SRC.ADJ_UOM_CD , 
TGT.ADJ_ADD_CHRG = SRC.ADJ_ADD_CHRG , 
TGT.ADJ_BASIC_COST = CAST(SRC.ADJ_BASIC_COST AS FLOAT64) , 
TGT.ADJ_OTHER_COST = CAST(SRC.ADJ_OTHER_COST AS FLOAT64) , 
TGT.ADJ_PLUS_COST = CAST(SRC.ADJ_PLUS_COST AS FLOAT64) , 
TGT.ADJ_PLUSRV_COST = CAST(SRC.ADJ_PLUSRV_COST AS FLOAT64) , 
TGT.ADJ_TOT_COST = CAST(SRC.ADJ_TOT_COST AS FLOAT64) , 
TGT.ADJ_DISP_APP = SRC.ADJ_DISP_APP , 
TGT.ADJ_DISP_PRICE = SRC.ADJ_DISP_PRICE , 
TGT.ADJ_TIER_STATUS = SRC.ADJ_TIER_STATUS , 
TGT.ADJ_RATEC_CD = SRC.ADJ_RATEC_CD , 
TGT.ADJ_TOD_CD = SRC.ADJ_TOD_CD , 
TGT.SC_PROB_CD = SRC.SC_PROB_CD , 
TGT.EXCEPT_FLAG = SRC.EXCEPT_FLAG , 
TGT.ADJ_TAX1 = CAST(SRC.ADJ_TAX1 AS FLOAT64) , 
TGT.ADJ_TAX2 = CAST(SRC.ADJ_TAX2 AS FLOAT64) , 
TGT.ADJ_ACCT_DT = SRC.ADJ_ACCT_DT , 
TGT.FEED_PROCESSED = SRC.FEED_PROCESSED , 
TGT.ADJ_PREM_COST = CAST(SRC.ADJ_PREM_COST AS FLOAT64) , 
TGT.ADJ_PRRV_COST = CAST(SRC.ADJ_PRRV_COST AS FLOAT64) , 
TGT.ETL_JOB_RUN_ID = CAST(SRC.JOB_RUN_ID AS INT64), 
TGT.SOURCE_SYSTEM_CD = SRC.SOURCE_SYSTEM_CD ,  
TGT.CREATED_DTTIME = current_datetime() ,
TGT.CREATED_BY = SRC.CREATED_BY
WHEN NOT MATCHED THEN INSERT 
(
ADJ_SEQ_ID,
COMM_CTR_ID,
SC_DT,
SC_ID,
DEL_FLAG,
ACCT_TYPE,
EMPLE_ID,
PAY_ID,
FACIL_INT_ID,
ADJ_RECORD_DT,
PAY_FACIL,
PAY_RECIP,
PAY_1099,
CHARGE_ENTL,
RECIP_PAY_DT,
ADJ_DESC,
ADJ_SVCP_CD,
ADJ_UNITS,
ADJ_UNIT_COST,
ADJ_UOM_CD,
ADJ_ADD_CHRG,
ADJ_BASIC_COST,
ADJ_OTHER_COST,
ADJ_PLUS_COST,
ADJ_PLUSRV_COST,
ADJ_TOT_COST,
ADJ_DISP_APP,
ADJ_DISP_PRICE,
ADJ_TIER_STATUS,
ADJ_RATEC_CD,
ADJ_TOD_CD,
SC_PROB_CD,
EXCEPT_FLAG,
ADJ_TAX1,
ADJ_TAX2,
ADJ_ACCT_DT,
FEED_PROCESSED,
ADJ_PREM_COST,
ADJ_PRRV_COST,
ETL_JOB_RUN_ID,
SOURCE_SYSTEM_CD,
CREATED_BY,
CREATED_DTTIME)
VALUES
(
CAST(SRC.ADJ_SEQ_ID AS INT64),
SRC.COMM_CTR_ID,
CAST(SRC.SC_DT AS DATETIME),
CAST(SRC.SC_ID AS INT64),
SRC.DEL_FLAG,
SRC.ACCT_TYPE,
SRC.EMPLE_ID,
CAST(SRC.PAY_ID AS INT64),
CAST(SRC.FACIL_INT_ID AS INT64),
CAST(SRC.ADJ_RECORD_DATE AS DATETIME),
SRC.PAY_FACIL,
SRC.PAY_RECIP,
SRC.PAY_1099,
SRC.CHARGE_ENTL,
CAST(SRC.RECIP_PAY_DATE AS DATETIME),
SRC.ADJ_DESCRIPTION,
SRC.ADJ_SVCP_CD,
CAST(SRC.ADJ_UNITS AS FLOAT64),
CAST(SRC.ADJ_UNIT_COST AS FLOAT64),
SRC.ADJ_UOM_CD,
SRC.ADJ_ADD_CHRG,
CAST(SRC.ADJ_BASIC_COST AS FLOAT64),
CAST(SRC.ADJ_OTHER_COST AS FLOAT64),
CAST(SRC.ADJ_PLUS_COST AS FLOAT64),
CAST(SRC.ADJ_PLUSRV_COST AS FLOAT64),
CAST(SRC.ADJ_TOT_COST AS FLOAT64),
SRC.ADJ_DISP_APP,
SRC.ADJ_DISP_PRICE,
SRC.ADJ_TIER_STATUS,
SRC.ADJ_RATEC_CD,
SRC.ADJ_TOD_CD,
SRC.SC_PROB_CD,
SRC.EXCEPT_FLAG,
CAST(SRC.ADJ_TAX1 AS FLOAT64),
CAST(SRC.ADJ_TAX2 AS FLOAT64),
SRC.ADJ_ACCT_DT,
SRC.FEED_PROCESSED,
CAST(SRC.ADJ_PREM_COST AS FLOAT64),
CAST(SRC.ADJ_PRRV_COST AS FLOAT64),
CAST(SRC.JOB_RUN_ID AS INT64),
SRC.SOURCE_SYSTEM_CD,
SRC.CREATED_BY,
current_datetime()
)
