-- UPDATE(MERGE)

--MERGE <target_table> [AS TARGET]
--USING <table_source> [AS SOURCE]
--ON <search_condition>
--[WHEN MATCHED 
--THEN <merge_matched> ]
--[WHEN NOT MATCHED [BY TARGET]
--THEN <merge_not_matched> ]
--[WHEN NOT MATCHED BY SOURCE
--THEN <merge_matched> ];
  
--ERS_STAGE_APD_SVC_FAC_ADJ_ITEM
--WORK_ERS_STG_APD_SVC_FAC_ADJ_ITEM
MERGE OPERATIONAL.ERS_STAGE_APD_SVC_FAC_ADJ_ITEM AS TGT
USING LANDING.WORK_ERS_STG_APD_SVC_FAC_ADJ_ITEM AS SRC
ON CAST(TGT.FACIL_INT_ID AS STRING) = SRC.FACIL_INT_ID AND
CAST(TGT.SCADJ_ID AS STRING) = SRC.SCADJ_ID 
WHEN MATCHED
THEN UPDATE SET
TGT.FACIL_INT_ID = CAST(SRC.FACIL_INT_ID AS INT64), 
TGT.SCADJ_ID = CAST(SRC.SCADJ_ID AS INT64), 
TGT.SCADJ_ACCT = SRC.SCADJ_ACCT, 
TGT.SCADJ_TYPE = SRC.SCADJ_TYPE, 
TGT.SCADJ_REASON = SRC.SCADJ_REASON,  
TGT.SCADJ_NUM_TOTAL = CAST(SRC.SCADJ_NUM_TOTAL AS INT64), 
TGT.SCADJ_NUM_TODATE = CAST(SRC.SCADJ_NUM_TODATE AS INT64), 
TGT.SCADJ_DESC = SRC.SCADJ_DESC, 
TGT.SCADJ_CURRENT_PMNT = CAST(SRC.SCADJ_CURRENT_PMNT AS FLOAT64), 
TGT.SCADJ_LAST_PYMNT = CAST(SRC.SCADJ_LAST_PYMNT AS FLOAT64), 
TGT.SCADJ_AMOUNT = CAST(SRC.SCADJ_AMOUNT AS FLOAT64), 
TGT.SCADJ_SKIP_TODATE = CAST(SRC.SCADJ_SKIP_TODATE AS INT64), 
TGT.SCADJ_SKIP_TOTAL = CAST(SRC.SCADJ_SKIP_TOTAL AS INT64), 
TGT.SCADJ_SKIP_FLAG = SRC.SCADJ_SKIP_FLAG,
TGT.SCADJ_TOTAL = CAST(SRC.SCADJ_TOTAL AS FLOAT64), 
TGT.SCADJ_TODATE = CAST(SRC.SCADJ_TODATE AS FLOAT64), 
TGT.SCADJ_1099 = SRC.SCADJ_1099 ,  
TGT.SCADJ_INF_REOCCUR = SRC.SCADJ_INF_REOCCUR ,  
TGT.SCADJ_PAYID = SRC.SCADJ_PAYID ,  
TGT.SCADJ_START = CAST(SRC.SCADJ_START AS DATE),
TGT.SCADJ_END = CAST(SRC.SCADJ_END AS DATE),
TGT.SCADJ_ACTIVE = SRC.SCADJ_ACTIVE ,  
TGT.SCADJ_PROC_FLAG = SRC.SCADJ_PROC_FLAG ,  
TGT.SCADJ_CALL_QTY =  CAST(SRC.SCADJ_CALL_QTY AS INT64),
TGT.ETL_JOB_RUN_ID = CAST(SRC.JOB_RUN_ID AS INT64), 
TGT.SOURCE_SYSTEM_CD = SRC.SOURCE_SYSTEM_CD ,  
TGT.CREATED_DTTIME = current_datetime() ,
TGT.CREATED_BY = SRC.CREATED_BY
WHEN NOT MATCHED THEN INSERT 
(
FACIL_INT_ID,
SCADJ_ID,
SCADJ_ACCT,
SCADJ_TYPE,
SCADJ_REASON,
SCADJ_NUM_TOTAL,
SCADJ_NUM_TODATE,
SCADJ_DESC,
SCADJ_CURRENT_PMNT,
SCADJ_LAST_PYMNT,
SCADJ_AMOUNT,
SCADJ_SKIP_TODATE,
SCADJ_SKIP_TOTAL,
SCADJ_SKIP_FLAG,
SCADJ_TOTAL,
SCADJ_TODATE,
SCADJ_1099,
SCADJ_INF_REOCCUR,
SCADJ_PAYID,
SCADJ_START,
SCADJ_END,
SCADJ_ACTIVE,
SCADJ_PROC_FLAG,
SCADJ_CALL_QTY,
ETL_JOB_RUN_ID,
SOURCE_SYSTEM_CD,
CREATED_BY,
CREATED_DTTIME)
VALUES
(
CAST(SRC.FACIL_INT_ID AS INT64), 
CAST(SRC.SCADJ_ID AS INT64), 
SRC.SCADJ_ACCT, 
SRC.SCADJ_TYPE, 
SRC.SCADJ_REASON,  
CAST(SRC.SCADJ_NUM_TOTAL AS INT64), 
CAST(SRC.SCADJ_NUM_TODATE AS INT64), 
SRC.SCADJ_DESC, 
CAST(SRC.SCADJ_CURRENT_PMNT AS FLOAT64), 
CAST(SRC.SCADJ_LAST_PYMNT AS FLOAT64), 
CAST(SRC.SCADJ_AMOUNT AS FLOAT64), 
CAST(SRC.SCADJ_SKIP_TODATE AS INT64), 
CAST(SRC.SCADJ_SKIP_TOTAL AS INT64), 
SRC.SCADJ_SKIP_FLAG,
CAST(SRC.SCADJ_TOTAL AS FLOAT64), 
CAST(SRC.SCADJ_TODATE AS FLOAT64), 
SRC.SCADJ_1099 ,  
SRC.SCADJ_INF_REOCCUR ,  
SRC.SCADJ_PAYID ,  
CAST(SRC.SCADJ_START AS DATE),
CAST(SRC.SCADJ_END AS DATE),
SRC.SCADJ_ACTIVE ,  
SRC.SCADJ_PROC_FLAG ,  
CAST(SRC.SCADJ_CALL_QTY AS INT64),
CAST(SRC.JOB_RUN_ID AS INT64),
SOURCE_SYSTEM_CD,
CREATED_BY,
current_datetime()
)

