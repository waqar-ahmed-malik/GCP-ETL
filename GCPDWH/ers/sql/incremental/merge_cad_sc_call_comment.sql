-- UPDATE(MERGE)

--MERGE <target_table> [AS TARGET]
--USING <table_source> [AS SOURCE]
--ON <search_condition>
--[WHEN MATCHED 
--THEN <merge_matched> ]
--[WHEN NOT MATCHED [BY TARGET]
--THEN <merge_not_matched> ]
--[WHEN NOT MATCHED BY SOURCE
--THEN <merge_matched> ];
  
--ERS_STAGE_CAD_SC_CALL_COMMENT
--WORK_ERS_STG_CAD_SC_CALL_COMMENT
MERGE OPERATIONAL.ERS_STAGE_CAD_SC_CALL_COMMENT AS TGT
USING LANDING.WORK_ERS_STG_CAD_SC_CALL_COMMENT AS SRC
ON CAST(TGT.SC_COMM_ID AS STRING) = SRC.SC_COMM_ID and
CAST(TGT.SC_DT AS STRING) = SRC.SC_DT and
CAST(TGT.SC_ID AS STRING) = SRC.SC_ID 
WHEN MATCHED
THEN UPDATE SET
TGT.SC_DT = CAST(SRC.SC_DT AS DATETIME) , 
TGT.SC_ID = CAST(SRC.SC_ID AS INT64), 
TGT.EMPLE_ID = SRC.EMPLE_ID, 
TGT.EMPLE_ROLE = SRC.EMPLE_ROLE , 
TGT.SC_COMM_ID = CAST(SRC.SC_COMM_ID AS INT64), 
TGT.SC_COMM_ADD_TM = CAST(SRC.SC_COMM_ADD_TM AS DATETIME), 
TGT.SC_COMM_TX = SRC.SC_COMM_TX , 
TGT.EMPLE_LOCATION = SRC.EMPLE_LOCATION , 
TGT.SC_COMM_STATUS = SRC.SC_COMM_STATUS , 
TGT.SC_COMM_TYPE = SRC.SC_COMM_TYPE, 
TGT.ETL_JOB_RUN_ID = CAST(SRC.JOB_RUN_ID AS INT64), 
TGT.SOURCE_SYSTEM_CD = SRC.SOURCE_SYSTEM_CD ,  
TGT.CREATED_DTTIME = current_datetime() ,
TGT.CREATED_BY = SRC.CREATED_BY
WHEN NOT MATCHED THEN INSERT 
(
SC_DT,
SC_ID,
EMPLE_ID,
EMPLE_ROLE,
SC_COMM_ID,
SC_COMM_ADD_TM,
SC_COMM_TX,
EMPLE_LOCATION,
SC_COMM_STATUS,
SC_COMM_TYPE,
ETL_JOB_RUN_ID,
SOURCE_SYSTEM_CD,
CREATED_BY,
CREATED_DTTIME)
VALUES
(
CAST(SRC.SC_DT AS DATETIME),
CAST(SRC.SC_ID AS INT64),
SRC.EMPLE_ID,
SRC.EMPLE_ROLE,
CAST(SRC.SC_COMM_ID AS INT64),
CAST(SRC.SC_COMM_ADD_TM AS DATETIME),
SRC.SC_COMM_TX,
SRC.EMPLE_LOCATION,
SRC.SC_COMM_STATUS,
SRC.SC_COMM_TYPE,
CAST(SRC.JOB_RUN_ID AS INT64),
SRC.SOURCE_SYSTEM_CD,
SRC.CREATED_BY,
current_datetime()
)
