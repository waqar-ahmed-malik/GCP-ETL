-- UPDATE(MERGE)

--MERGE <target_table> [AS TARGET]
--USING <table_source> [AS SOURCE]
--ON <search_condition>
--[WHEN MATCHED 
--THEN <merge_matched> ]
--[WHEN NOT MATCHED [BY TARGET]
--THEN <merge_not_matched> ]
--[WHEN NOT MATCHED BY SOURCE
--THEN <merge_matched> ];
  
--ERS_STAGE_SPOT_GRID
--WORK_ERS_STG_SPOT_GRID
MERGE REFERENCE.ERS_STAGE_SPOT_GRID AS TGT
USING LANDING.WORK_ERS_STG_SPOT_GRID AS SRC
ON TGT.ID = CAST(SRC.GRID_ID AS INT64)
WHEN MATCHED
THEN UPDATE SET
TGT.ID = CAST(SRC.GRID_ID AS INT64) , 
TGT.GRID_NM = SRC.GRID_NAME , 
TGT.GRID_DESC = SRC.GRID_DESCRIPTION, 
TGT.GRID_GROUP_ID = CAST(SRC.GRID_GROUP_ID AS INT64), 
TGT.COLOR = SRC.COLOR , 
TGT.GEOMETRY = CONCAT(SRC.GEOMETRY1,COALESCE(SRC.GEOMETRY2,''),COALESCE(SRC.GEOMETRY3,''),COALESCE(SRC.GEOMETRY4,''),COALESCE(SRC.GEOMETRY5,''),COALESCE(SRC.GEOMETRY6,'')), 
TGT.LAST_MODIFIED = PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S',SRC.LAST_MODIFIED) , 
TGT.PROMOTE_TASK_ID = CAST(SRC.PROMOTE_TASK_ID AS INT64) , 
TGT.REVERT_TASK_ID = CAST(SRC.REVERT_TASK_ID AS INT64), 
TGT.DEV_ID = CAST(SRC.DEV_ID AS INT64), 
TGT.TO_DELETE = SRC.TO_DELETE,
TGT.ETL_JOB_RUN_ID = CAST(SRC.JOB_RUN_ID AS INT64),
TGT.SOURCE_SYSTEM_CD = SRC.SOURCE_SYSTEM_CD ,
TGT.CREATED_BY = SRC.CREATED_BY,
TGT.CREATED_DTTIME = current_datetime()
WHEN NOT MATCHED THEN INSERT 
(
ID,
GRID_NM,
GRID_DESC,
GRID_GROUP_ID,
COLOR,
GEOMETRY,
LAST_MODIFIED,
PROMOTE_TASK_ID,
REVERT_TASK_ID,
DEV_ID,
TO_DELETE,
ETL_JOB_RUN_ID,
SOURCE_SYSTEM_CD,
CREATED_BY,
CREATED_DTTIME)
VALUES
(
CAST(SRC.GRID_ID AS INT64) , 
SRC.GRID_NAME , 
SRC.GRID_DESCRIPTION, 
CAST(SRC.GRID_GROUP_ID AS INT64), 
SRC.COLOR , 
CONCAT(SRC.GEOMETRY1,COALESCE(SRC.GEOMETRY2,''),COALESCE(SRC.GEOMETRY3,''),COALESCE(SRC.GEOMETRY4,''),COALESCE(SRC.GEOMETRY5,''),COALESCE(SRC.GEOMETRY6,'')) , 
PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S',SRC.LAST_MODIFIED) , 
CAST(SRC.PROMOTE_TASK_ID AS INT64) , 
CAST(SRC.REVERT_TASK_ID AS INT64), 
CAST(SRC.DEV_ID AS INT64), 
SRC.TO_DELETE,
CAST(SRC.JOB_RUN_ID AS INT64),
SRC.SOURCE_SYSTEM_CD ,  
SRC.CREATED_BY,
current_datetime()
)